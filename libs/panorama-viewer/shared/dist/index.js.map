{"version":3,"sources":["@photo-sphere-viewer/core","three","../index.ts","../AbstractVideoAdapter.ts","../autorotate-utils.ts","../Queue.ts","../tiles-utils.ts"],"sourcesContent":["module.exports = PhotoSphereViewer","module.exports = THREE","/**\n * This file only exists for the UMD test\n */\n\nexport * from './AbstractVideoAdapter';\nexport * from './autorotate-utils';\nexport * from './Queue';\nexport * from './tiles-utils';\n","import type { TextureData, Viewer } from '@photo-sphere-viewer/core';\nimport { AbstractAdapter, events, PSVError } from '@photo-sphere-viewer/core';\nimport { BufferGeometry, Material, Mesh, VideoTexture } from 'three';\n\nexport type AbstractVideoPanorama = {\n    source: string;\n};\n\nexport type AbstractVideoAdapterConfig = {\n    /**\n     * automatically start the video\n     * @default false\n     */\n    autoplay?: boolean;\n    /**\n     * initially mute the video\n     * @default false\n     */\n    muted?: boolean;\n};\n\ntype AbstractVideoMesh = Mesh<BufferGeometry, Material>;\ntype AbstractVideoTexture = TextureData<VideoTexture>;\n\n/**\n * Base video adapters class\n */\nexport abstract class AbstractVideoAdapter<TPanorama extends AbstractVideoPanorama> extends AbstractAdapter<\n    TPanorama,\n    VideoTexture\n> {\n    static override readonly supportsDownload = false;\n    static override readonly supportsOverlay = false;\n\n    protected abstract readonly config: AbstractVideoAdapterConfig;\n\n    private video: HTMLVideoElement;\n\n    constructor(viewer: Viewer) {\n        super(viewer);\n\n        this.viewer.addEventListener(events.BeforeRenderEvent.type, this);\n    }\n\n    override destroy() {\n        this.viewer.removeEventListener(events.BeforeRenderEvent.type, this);\n\n        this.__removeVideo();\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        if (e instanceof events.BeforeRenderEvent) {\n            this.viewer.needsUpdate();\n        }\n    }\n\n    override supportsPreload(): boolean {\n        return false;\n    }\n\n    override supportsTransition(): boolean {\n        return false;\n    }\n\n    loadTexture(panorama: AbstractVideoPanorama): Promise<AbstractVideoTexture> {\n        if (typeof panorama !== 'object' || !panorama.source) {\n            return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\n        }\n\n        if (!this.viewer.getPlugin('video')) {\n            return Promise.reject(new PSVError('Video adapters require VideoPlugin to be loaded too.'));\n        }\n\n        const video = this.__createVideo(panorama.source);\n\n        return this.__videoLoadPromise(video).then(() => {\n            const texture = new VideoTexture(video);\n            return { panorama, texture };\n        });\n    }\n\n    protected switchVideo(texture: VideoTexture) {\n        let currentTime;\n        let duration;\n        let paused = !this.config.autoplay;\n        let muted = this.config.muted;\n        let volume = 1;\n        if (this.video) {\n            ({ currentTime, duration, paused, muted, volume } = this.video);\n        }\n\n        this.__removeVideo();\n        this.video = texture.image;\n\n        // keep current time when switching resolution\n        if (this.video.duration === duration) {\n            this.video.currentTime = currentTime;\n        }\n\n        // keep volume\n        this.video.muted = muted;\n        this.video.volume = volume;\n\n        // play\n        if (!paused) {\n            this.video.play();\n        }\n    }\n\n    setTextureOpacity(mesh: AbstractVideoMesh, opacity: number) {\n        mesh.material.opacity = opacity;\n        mesh.material.transparent = opacity < 1;\n    }\n\n    setOverlay() {\n        throw new PSVError('VideoAdapter does not support overlay');\n    }\n\n    disposeTexture(textureData: AbstractVideoTexture) {\n        if (textureData.texture) {\n            const video: HTMLVideoElement = textureData.texture.image;\n            video.pause();\n            this.viewer.container.removeChild(video);\n        }\n        textureData.texture?.dispose();\n    }\n\n    private __removeVideo() {\n        if (this.video) {\n            this.video.pause();\n            this.viewer.container.removeChild(this.video);\n            delete this.video;\n        }\n    }\n\n    private __createVideo(src: string): HTMLVideoElement {\n        const video = document.createElement('video');\n        video.crossOrigin = this.viewer.config.withCredentials ? 'use-credentials' : 'anonymous';\n        video.loop = true;\n        video.playsInline = true;\n        video.style.display = 'none';\n        video.muted = this.config.muted;\n        video.src = src;\n        video.preload = 'metadata';\n\n        this.viewer.container.appendChild(video);\n\n        return video;\n    }\n\n    private __videoLoadPromise(video: HTMLVideoElement): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const onLoaded = () => {\n                if (this.video && video.duration === this.video.duration) {\n                    resolve(this.__videoBufferPromise(video, this.video.currentTime));\n                } else {\n                    resolve();\n                }\n                video.removeEventListener('loadedmetadata', onLoaded);\n            };\n\n            const onError = (err: ErrorEvent) => {\n                reject(err);\n                video.removeEventListener('error', onError);\n            };\n\n            video.addEventListener('loadedmetadata', onLoaded);\n            video.addEventListener('error', onError);\n        });\n    }\n\n    private __videoBufferPromise(video: HTMLVideoElement, currentTime: number): Promise<void> {\n        return new Promise((resolve) => {\n            function onBuffer() {\n                const buffer = video.buffered;\n                for (let i = 0, l = buffer.length; i < l; i++) {\n                    if (buffer.start(i) <= video.currentTime && buffer.end(i) >= video.currentTime) {\n                        video.pause();\n                        video.removeEventListener('buffer', onBuffer);\n                        video.removeEventListener('progress', onBuffer);\n                        resolve();\n                        break;\n                    }\n                }\n            }\n\n            // try to reduce the switching time by preloading in advance\n            // FIXME find a better way ?\n            video.currentTime = Math.min(currentTime + 2000, video.duration);\n            video.muted = true;\n\n            video.addEventListener('buffer', onBuffer);\n            video.addEventListener('progress', onBuffer);\n\n            video.play();\n        });\n    }\n}\n","import type { MarkersPlugin } from '@photo-sphere-viewer/markers-plugin';\n\nlet debugMarkers: string[] = [];\n\n/**\n * @internal\n */\nexport function debugCurve(markers: MarkersPlugin, curve: [number, number][], stepSize: number) {\n    debugMarkers.forEach((marker) => {\n        try {\n            markers.removeMarker(marker);\n        } catch (e) {\n            // noop\n        }\n    });\n\n    markers.addMarker({\n        id: 'autorotate-path',\n        polyline: curve,\n        svgStyle: {\n            stroke: 'white',\n            strokeWidth: '2px',\n        },\n    });\n    debugMarkers = ['autorotate-path'];\n\n    curve.forEach((pos, i) => {\n        markers.addMarker({\n            id: 'autorotate-path-' + i,\n            circle: 5,\n            position: {\n                yaw: pos[0],\n                pitch: pos[1],\n            },\n            svgStyle: {\n                fill: i % stepSize === 0 ? 'red' : 'black',\n            },\n        });\n        debugMarkers.push('autorotate-path-' + i);\n    });\n}\n","/**\n * @internal\n */\nconst enum Status {\n    DISABLED,\n    PENDING,\n    RUNNING,\n    CANCELLED,\n    DONE,\n    ERROR,\n}\n\n/**\n * @internal\n */\nexport class Task {\n    status: Status = Status.PENDING;\n\n    constructor(\n        public readonly id: string,\n        public priority: number,\n        private readonly fn: (task: Task) => Promise<any>\n    ) {}\n\n    start() {\n        this.status = Status.RUNNING;\n        return this.fn(this).then(\n            () => {\n                this.status = Status.DONE;\n            },\n            () => {\n                this.status = Status.ERROR;\n            }\n        );\n    }\n\n    cancel() {\n        this.status = Status.CANCELLED;\n    }\n\n    isCancelled() {\n        return this.status === Status.CANCELLED;\n    }\n}\n\n/**\n * @internal\n */\nexport class Queue {\n    private runningTasks: Record<string, boolean> = {};\n    private tasks: Record<string, Task> = {};\n\n    constructor(private readonly concurency = 4) {}\n\n    enqueue(task: Task) {\n        this.tasks[task.id] = task;\n    }\n\n    clear() {\n        Object.values(this.tasks).forEach((task) => task.cancel());\n        this.tasks = {};\n        this.runningTasks = {};\n    }\n\n    setPriority(taskId: string, priority: number) {\n        const task = this.tasks[taskId];\n        if (task) {\n            task.priority = priority;\n            if (task.status === Status.DISABLED) {\n                task.status = Status.PENDING;\n            }\n        }\n    }\n\n    disableAllTasks() {\n        Object.values(this.tasks).forEach((task) => {\n            task.status = Status.DISABLED;\n        });\n    }\n\n    start() {\n        if (Object.keys(this.runningTasks).length >= this.concurency) {\n            return;\n        }\n\n        const nextTask = Object.values(this.tasks)\n            .filter((task) => task.status === Status.PENDING)\n            .sort((a, b) => b.priority - a.priority)\n            .pop();\n\n        if (nextTask) {\n            this.runningTasks[nextTask.id] = true;\n\n            nextTask.start().then(() => {\n                if (!nextTask.isCancelled()) {\n                    delete this.tasks[nextTask.id];\n                    delete this.runningTasks[nextTask.id];\n                    this.start();\n                }\n            });\n\n            this.start(); // start tasks until max concurrency is reached\n        }\n    }\n}\n","import { PSVError } from '@photo-sphere-viewer/core';\nimport {\n    BufferGeometry,\n    CanvasTexture,\n    LineSegments,\n    Material,\n    MeshBasicMaterial,\n    Object3D,\n    WireframeGeometry,\n} from 'three';\n\n/**\n * Checks if the zoomRange properties are coherent\n * @internal\n */\nexport function checkTilesLevels(levels: { zoomRange: [number, number] }[]) {\n    let previous = 0;\n    levels.forEach((level, i) => {\n        if (!level.zoomRange || level.zoomRange.length !== 2) {\n            throw new PSVError(`Tiles level ${i} is missing \"zoomRange\" property`);\n        }\n        if (level.zoomRange[0] >= level.zoomRange[1]\n            || level.zoomRange[0] !== previous\n            || i === 0 && level.zoomRange[0] !== 0\n            || i === levels.length - 1 && level.zoomRange[1] !== 100) {\n            throw new PSVError(`Tiles levels' \"zoomRange\" are not orderer or are not covering the whole 0-100 range`);\n        }\n        previous = level.zoomRange[1];\n    });\n}\n\nexport function getTileIndexByZoomLevel<T extends { zoomRange: [number, number] }>(levels: T[], zoomLevel: number): number {\n    return levels.findIndex((level) => {\n        return zoomLevel >= level.zoomRange[0] && zoomLevel <= level.zoomRange[1];\n    });\n}\n\n/**\n * Generates an material for errored tiles\n * @internal\n */\nexport function buildErrorMaterial(): MeshBasicMaterial {\n    const canvas = document.createElement('canvas');\n    canvas.width = 512;\n    canvas.height = 512;\n\n    const ctx = canvas.getContext('2d');\n\n    ctx.fillStyle = '#333';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.font = `${canvas.width / 5}px serif`;\n    ctx.fillStyle = '#a22';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText('⚠', canvas.width / 2, canvas.height / 2);\n\n    const texture = new CanvasTexture(canvas);\n    return new MeshBasicMaterial({ map: texture });\n}\n\n/**\n * Creates a wireframe geometry, for debug\n * @internal\n */\nexport function createWireFrame(geometry: BufferGeometry): Object3D {\n    const wireframe = new WireframeGeometry(geometry);\n    const line = new LineSegments<WireframeGeometry, Material>(wireframe);\n    line.material.depthTest = false;\n    line.material.opacity = 0.25;\n    line.material.transparent = true;\n    return line;\n}\n\nconst DEBUG_COLORS = ['dodgerblue', 'limegreen', 'indianred'];\n\n/**\n * Applies a color filter to an tile image and shows the id of the tile\n * @internal\n */\nexport function buildDebugTexture(image: HTMLImageElement, level: number, id: string): HTMLCanvasElement {\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.fillStyle = DEBUG_COLORS[level % DEBUG_COLORS.length];\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    ctx.globalCompositeOperation = 'multiply';\n    ctx.drawImage(image, 0, 0);\n\n    const fontSize = image.width / 7;\n    ctx.globalCompositeOperation = 'source-over';\n    ctx.fillStyle = 'white';\n    ctx.font = `${fontSize}px monospace`;\n    ctx.textAlign = 'center';\n    id.split('\\n').forEach((id2, i) => {\n        ctx.fillText(id2, image.width / 2, image.height / 2 + fontSize * (0.3 + i));\n    });\n\n    return canvas;\n}\n"],"mappings":"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","names":["import_core","import_three"]}