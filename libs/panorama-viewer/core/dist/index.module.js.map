{"version":3,"sources":["../src/data/constants.ts","../src/utils/index.ts","../src/utils/math.ts","../src/utils/browser.ts","../src/utils/misc.ts","../src/utils/psv.ts","../src/PSVError.ts","../src/utils/Animation.ts","../src/utils/Dynamic.ts","../src/utils/MultiDynamic.ts","../src/utils/PressHandler.ts","../src/utils/Slider.ts","../src/events.ts","../src/lib/TypedEventTarget.ts","../src/adapters/AbstractAdapter.ts","../src/adapters/EquirectangularAdapter.ts","../src/data/system.ts","../src/data/config.ts","../src/plugins/AbstractPlugin.ts","../src/services/DataHelper.ts","../src/services/AbstractService.ts","../src/services/EventsHandler.ts","../src/services/Renderer.ts","../src/services/TextureLoader.ts","../src/services/ViewerDynamics.ts","../src/services/ViewerState.ts","../src/Viewer.ts"],"sourcesContent":["import arrow from '../icons/arrow.svg';\nimport close from '../icons/close.svg';\nimport download from '../icons/download.svg';\nimport fullscreenIn from '../icons/fullscreen-in.svg';\nimport fullscreenOut from '../icons/fullscreen-out.svg';\nimport info from '../icons/info.svg';\nimport menu from '../icons/menu.svg';\nimport zoomIn from '../icons/zoom-in.svg';\nimport zoomOut from '../icons/zoom-out.svg';\n\n/**\n * Default duration of the transition between panoramas\n */\nexport const DEFAULT_TRANSITION = 1500;\n\n/**\n *  Minimum duration of the animations created with {@link Viewer#animate}\n */\nexport const ANIMATION_MIN_DURATION = 500;\n\n/**\n * Number of pixels bellow which a mouse move will be considered as a click\n */\nexport const MOVE_THRESHOLD = 4;\n\n/**\n * Delay in milliseconds between two clicks to consider a double click\n */\nexport const DBLCLICK_DELAY = 300;\n\n/**\n * Delay in milliseconds to emulate a long touch\n */\nexport const LONGTOUCH_DELAY = 500;\n\n/**\n * Delay in milliseconds to for the two fingers overlay to appear\n */\nexport const TWOFINGERSOVERLAY_DELAY = 100;\n\n/**\n * Duration in milliseconds of the \"ctrl zoom\" overlay\n */\nexport const CTRLZOOM_TIMEOUT = 2000;\n\n/**\n * Duration of the mouse position history used to compute inertia\n */\nexport const INERTIA_WINDOW = 300;\n\n/**\n * Radius of the SphereGeometry, Half-length of the BoxGeometry\n */\nexport const SPHERE_RADIUS = 1.2;\n\n/**\n * Property name added to viewer element\n */\nexport const VIEWER_DATA = 'photoSphereViewer';\n\n/**\n * Actions available for {@link ViewerConfig['keyboard']} configuration\n */\nexport enum ACTIONS {\n    ROTATE_UP = 'ROTATE_UP',\n    ROTATE_DOWN = 'ROTATE_DOWN',\n    ROTATE_RIGHT = 'ROTATE_RIGHT',\n    ROTATE_LEFT = 'ROTATE_LEFT',\n    ZOOM_IN = 'ZOOM_IN',\n    ZOOM_OUT = 'ZOOM_OUT',\n}\n\n/**\n * Internal identifiers for various stuff\n * @internal\n */\nexport const IDS = {\n    MENU: 'menu',\n    TWO_FINGERS: 'twoFingers',\n    CTRL_ZOOM: 'ctrlZoom',\n    ERROR: 'error',\n    DESCRIPTION: 'description',\n};\n\n/**\n * Subset of keyboard codes\n */\nexport const KEY_CODES = {\n    Enter: 'Enter',\n    Control: 'Control',\n    Escape: 'Escape',\n    Space: ' ',\n    PageUp: 'PageUp',\n    PageDown: 'PageDown',\n    ArrowLeft: 'ArrowLeft',\n    ArrowUp: 'ArrowUp',\n    ArrowRight: 'ArrowRight',\n    ArrowDown: 'ArrowDown',\n    Delete: 'Delete',\n    Plus: '+',\n    Minus: '-',\n};\n\n/**\n * Collection of SVG icons\n */\nexport const ICONS = {\n    arrow,\n    close,\n    download,\n    fullscreenIn,\n    fullscreenOut,\n    info,\n    menu,\n    zoomIn,\n    zoomOut,\n};\n\n// @formatter:off\n/**\n * Collection of easing functions\n * @link https://gist.github.com/frederickk/6165768\n */\nexport const EASINGS: Record<string, (t: number) => number> = {\n    linear: (t: number) => t,\n\n    inQuad: (t: number) => t * t,\n    outQuad: (t: number) => t * (2 - t),\n    inOutQuad: (t: number) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t),\n\n    inCubic: (t: number) => t * t * t,\n    outCubic: (t: number) => --t * t * t + 1,\n    inOutCubic: (t: number) => (t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1),\n\n    inQuart: (t: number) => t * t * t * t,\n    outQuart: (t: number) => 1 - --t * t * t * t,\n    inOutQuart: (t: number) => (t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t),\n\n    inQuint: (t: number) => t * t * t * t * t,\n    outQuint: (t: number) => 1 + --t * t * t * t * t,\n    inOutQuint: (t: number) => (t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t),\n\n    inSine: (t: number) => 1 - Math.cos(t * (Math.PI / 2)),\n    outSine: (t: number) => Math.sin(t * (Math.PI / 2)),\n    inOutSine: (t: number) => 0.5 - 0.5 * Math.cos(Math.PI * t),\n\n    inExpo: (t: number) => Math.pow(2, 10 * (t - 1)),\n    outExpo: (t: number) => 1 - Math.pow(2, -10 * t),\n    inOutExpo: (t: number) => ((t = t * 2 - 1) < 0 ? 0.5 * Math.pow(2, 10 * t) : 1 - 0.5 * Math.pow(2, -10 * t)),\n\n    inCirc: (t: number) => 1 - Math.sqrt(1 - t * t),\n    outCirc: (t: number) => Math.sqrt(1 - (t - 1) * (t - 1)),\n    inOutCirc: (t: number) => (t *= 2) < 1 ? 0.5 - 0.5 * Math.sqrt(1 - t * t) : 0.5 + 0.5 * Math.sqrt(1 - (t -= 2) * t),\n};\n// @formatter:on\n","export * from './browser';\nexport * from './math';\nexport * from './misc';\nexport * from './psv';\n\nexport * from './Animation';\nexport * from './Dynamic';\nexport * from './MultiDynamic';\nexport * from './PressHandler';\nexport * from './Slider';\n","import { Point, Position } from '../model';\n\n/**\n * Ensures a value is within 0 and `max` by wrapping max to 0\n */\nexport function wrap(value: number, max: number): number {\n    let result = value % max;\n\n    if (result < 0) {\n        result += max;\n    }\n\n    return result;\n}\n\n/**\n * Computes the sum of an array\n */\nexport function sum(array: number[]): number {\n    return array.reduce((a, b) => a + b, 0);\n}\n\n/**\n * Computes the distance between two points\n */\nexport function distance(p1: Point, p2: Point): number {\n    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n\n/**\n * Computes the angle wet ween two points\n */\nexport function angle(p1: Point, p2: Point): number {\n    return Math.atan2(p2.y - p1.y, p2.x - p1.x);\n}\n\n/**\n * Compute the shortest offset between two angles on a sphere\n */\nexport function getShortestArc(from: number, to: number): number {\n    const candidates = [\n        0, // direct\n        Math.PI * 2, // clock-wise cross zero\n        -Math.PI * 2, // counter-clock-wise cross zero\n    ];\n\n    return candidates.reduce((value, candidate) => {\n        const newCandidate = to - from + candidate;\n        return Math.abs(newCandidate) < Math.abs(value) ? newCandidate : value;\n    }, Infinity);\n}\n\n/**\n * Computes the angle between the current position and a target position\n */\nexport function getAngle(position1: Position, position2: Position): number {\n    // prettier-ignore\n    return Math.acos(\n        Math.cos(position1.pitch)\n        * Math.cos(position2.pitch) \n        * Math.cos(position1.yaw - position2.yaw) \n        + Math.sin(position1.pitch) \n        * Math.sin(position2.pitch)\n    );\n}\n\n/**\n * Returns the distance between two points on a sphere of radius one\n * @link http://www.movable-type.co.uk/scripts/latlong.html\n */\nexport function greatArcDistance([lon1, lat1]: [number, number], [lon2, lat2]: [number, number]): number {\n    const x = (lon2 - lon1) * Math.cos((lat1 + lat2) / 2);\n    const y = lat2 - lat1;\n    return Math.sqrt(x * x + y * y);\n}\n","import { Point } from '../model';\nimport { angle, distance } from './math';\n\n/**\n * Get an element in the page by an unknown selector\n */\nexport function getElement(selector: string | HTMLElement): HTMLElement {\n    if (typeof selector === 'string') {\n        return selector.match(/^[a-z]/i) ? document.getElementById(selector) : document.querySelector(selector);\n    } else {\n        return selector;\n    }\n}\n\n/**\n * Toggles a CSS class\n */\nexport function toggleClass(element: Element, className: string, active?: boolean) {\n    if (active === undefined) {\n        element.classList.toggle(className);\n    } else if (active) {\n        element.classList.add(className);\n    } else if (!active) {\n        element.classList.remove(className);\n    }\n}\n\n/**\n * Adds one or several CSS classes to an element\n */\nexport function addClasses(element: Element, className: string) {\n    element.classList.add(...className.split(' '));\n}\n\n/**\n * Removes one or several CSS classes to an element\n */\nexport function removeClasses(element: Element, className: string) {\n    element.classList.remove(...className.split(' '));\n}\n\n/**\n * Searches if an element has a particular parent at any level including itself\n */\nexport function hasParent(el: HTMLElement, parent: Element): boolean {\n    let test: HTMLElement | null = el;\n\n    do {\n        if (test === parent) {\n            return true;\n        }\n        test = test.parentElement;\n    } while (test);\n\n    return false;\n}\n\n/**\n * Gets the closest parent (can by itself)\n */\nexport function getClosest(el: HTMLElement, selector: string): HTMLElement | null {\n    // When el is document or window, the matches does not exist\n    if (!el?.matches) {\n        return null;\n    }\n\n    let test: HTMLElement | null = el;\n\n    do {\n        if (test.matches(selector)) {\n            return test;\n        }\n        test = test.parentElement;\n    } while (test);\n\n    return null;\n}\n\n/**\n * Gets the position of an element in the viewer without reflow\n * @description Will gives the same result as getBoundingClientRect() as soon as there are no CSS transforms\n */\nexport function getPosition(el: HTMLElement): Point {\n    let x = 0;\n    let y = 0;\n    let test: HTMLElement | null = el;\n\n    while (test) {\n        x += test.offsetLeft - test.scrollLeft + test.clientLeft;\n        y += test.offsetTop - test.scrollTop + test.clientTop;\n        test = test.offsetParent as HTMLElement;\n    }\n\n    return { x, y };\n}\n\n/**\n * Gets an element style value\n */\nexport function getStyle(elt: Element, prop: string): string {\n    return (window.getComputedStyle(elt, null) as any)[prop];\n}\n\nexport type TouchData = {\n    distance: number;\n    angle: number;\n    center: Point;\n};\n\n/**\n * Returns data about a touch event (first 2 fingers) : distance, angle, center\n */\nexport function getTouchData(e: TouchEvent): TouchData {\n    if (e.touches.length < 2) {\n        return null;\n    }\n\n    const p1 = { x: e.touches[0].clientX, y: e.touches[0].clientY };\n    const p2 = { x: e.touches[1].clientX, y: e.touches[1].clientY };\n\n    return {\n        distance: distance(p1, p2),\n        angle: angle(p1, p2),\n        center: { x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 },\n    };\n}\n\n/**\n * Detects if fullscreen is enabled\n */\nexport function isFullscreenEnabled(elt: HTMLElement): boolean {\n    return (document.fullscreenElement || (document as any).webkitFullscreenElement) === elt;\n}\n\n/**\n * Enters fullscreen mode\n */\nexport function requestFullscreen(elt: HTMLElement) {\n    (elt.requestFullscreen || (elt as any).webkitRequestFullscreen).call(elt);\n}\n\n/**\n * Exits fullscreen mode\n */\nexport function exitFullscreen() {\n    (document.exitFullscreen || (document as any).webkitExitFullscreen).call(document);\n}\n","/**\n * Transforms a string to dash-case\n * @link https://github.com/shahata/dasherize\n */\nexport function dasherize(str: string): string {\n    return str.replace(/[A-Z](?:(?=[^A-Z])|[A-Z]*(?=[A-Z][^A-Z]|$))/g, (s, i) => {\n        return (i > 0 ? '-' : '') + s.toLowerCase();\n    });\n}\n\n/**\n * Returns a function, that, when invoked, will only be triggered at most once during a given window of time.\n */\nexport function throttle<T extends (...args: any) => any>(callback: T, wait: number): (...args: Parameters<T>) => void {\n    let paused = false;\n    return function (this: any, ...args: Parameters<T>) {\n        if (!paused) {\n            paused = true;\n            setTimeout(() => {\n                callback.apply(this, args);\n                paused = false;\n            }, wait);\n        }\n    };\n}\n\n/**\n * Test if an object is a plain object\n * @description Test if an object is a plain object, i.e. is constructed\n * by the built-in Object constructor and inherits directly from Object.prototype\n * or null.\n * @link https://github.com/lodash/lodash/blob/master/isPlainObject.js\n */\nexport function isPlainObject<T extends Record<string, any>>(value: any): value is T {\n    if (typeof value !== 'object' || value === null || Object.prototype.toString.call(value) !== '[object Object]') {\n        return false;\n    }\n    if (Object.getPrototypeOf(value) === null) {\n        return true;\n    }\n    let proto = value;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(value) === proto;\n}\n\n/**\n * Merges the enumerable attributes of two objects\n * @description Replaces arrays and alters the target object.\n * @copyright Nicholas Fisher <nfisher110@gmail.com>\n */\nexport function deepmerge<T>(target: T, src: T): T {\n    const first = src;\n\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    return (function merge(target: any, src: any) {\n        if (Array.isArray(src)) {\n            if (!target || !Array.isArray(target)) {\n                target = [];\n            } else {\n                target.length = 0;\n            }\n            src.forEach((e, i) => {\n                target[i] = merge(null, e);\n            });\n        } else if (typeof src === 'object') {\n            if (!target || Array.isArray(target)) {\n                target = {};\n            }\n            Object.keys(src).forEach((key) => {\n                if (typeof src[key] !== 'object' || !src[key] || !isPlainObject(src[key])) {\n                    target[key] = src[key];\n                } else if (src[key] !== first) {\n                    if (!target[key]) {\n                        target[key] = merge(null, src[key]);\n                    } else {\n                        merge(target[key], src[key]);\n                    }\n                }\n            });\n        } else {\n            target = src;\n        }\n\n        return target;\n    })(target, src);\n}\n\n/**\n * Deeply clones an object\n */\nexport function clone<T>(src: T): T {\n    return deepmerge(null as T, src);\n}\n\n/**\n * Tests of an object is empty\n */\nexport function isEmpty(obj: any): boolean {\n    return !obj || (Object.keys(obj).length === 0 && obj.constructor === Object);\n}\n\n/**\n * Returns if a valu is null or undefined\n */\nexport function isNil(val: any): val is null | undefined {\n    return val === null || val === undefined;\n}\n\n/**\n * Returns the first non null non undefined parameter\n */\nexport function firstNonNull<T>(...values: T[]): T | null {\n    for (const val of values) {\n        if (!isNil(val)) {\n            return val;\n        }\n    }\n\n    return null;\n}\n\n/**\n * Returns deep equality between objects\n * @link https://gist.github.com/egardner/efd34f270cc33db67c0246e837689cb9\n */\nexport function deepEqual(obj1: any, obj2: any): boolean {\n    if (obj1 === obj2) {\n        return true;\n    } else if (isObject(obj1) && isObject(obj2)) {\n        if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n            return false;\n        }\n        for (const prop of Object.keys(obj1)) {\n            if (!deepEqual(obj1[prop], obj2[prop])) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction isObject(obj: any): boolean {\n    return typeof obj === 'object' && obj !== null;\n}\n","import { Euler, LinearFilter, MathUtils, Quaternion, RepeatWrapping, Texture, Vector3 } from 'three';\nimport { ExtendedPosition, Point, ResolvableBoolean } from '../model';\nimport { PSVError } from '../PSVError';\nimport { wrap } from './math';\nimport { clone, isPlainObject } from './misc';\n\n/**\n * Executes a callback with the value of a ResolvableBoolean\n */\nexport function resolveBoolean(value: boolean | ResolvableBoolean, cb: (val: boolean, init: boolean) => void) {\n    if (isPlainObject(value)) {\n        cb((value as ResolvableBoolean).initial, true);\n        (value as ResolvableBoolean).promise.then((res) => cb(res, false));\n    } else {\n        cb(value as boolean, true);\n    }\n}\n\n/**\n * Inverts the result of a ResolvableBoolean\n */\nexport function invertResolvableBoolean(value: ResolvableBoolean): ResolvableBoolean {\n    return {\n        initial: !value.initial,\n        promise: value.promise.then((res) => !res),\n    };\n}\n\n/**\n * Builds an Error with name 'AbortError'\n */\nexport function getAbortError(): Error {\n    const error = new Error('Loading was aborted.');\n    error.name = 'AbortError';\n    return error;\n}\n\n/**\n * Tests if an Error has name 'AbortError'\n */\nexport function isAbortError(err: Error): boolean {\n    return err?.name === 'AbortError';\n}\n\n/**\n * Displays a warning in the console with \"PhotoSphereViewer\" prefix\n */\nexport function logWarn(message: string) {\n    console.warn(`PhotoSphereViewer: ${message}`);\n}\n\n/**\n * Checks if an object is a ExtendedPosition, ie has textureX/textureY or yaw/pitch\n */\nexport function isExtendedPosition(object: any): object is ExtendedPosition {\n    if (!object) {\n        return false;\n    }\n    return [\n        ['textureX', 'textureY'],\n        ['yaw', 'pitch'],\n    ].some(([key1, key2]) => {\n        return object[key1] !== undefined && object[key2] !== undefined;\n    });\n}\n\n/**\n * Returns the value of a given attribute in the panorama metadata\n */\nexport function getXMPValue(data: string, attr: string): number | null {\n    // XMP data are stored in children\n    let result = data.match('<GPano:' + attr + '>(.*)</GPano:' + attr + '>');\n    if (result !== null) {\n        const val = parseInt(result[1], 10);\n        return isNaN(val) ? null : val;\n    }\n\n    // XMP data are stored in attributes\n    result = data.match('GPano:' + attr + '=\"(.*?)\"');\n    if (result !== null) {\n        const val = parseInt(result[1], 10);\n        return isNaN(val) ? null : val;\n    }\n\n    return null;\n}\n\nconst CSS_POSITIONS: Record<string, string> = {\n    top: '0%',\n    bottom: '100%',\n    left: '0%',\n    right: '100%',\n    center: '50%',\n};\nconst X_VALUES = ['left', 'center', 'right'];\nconst Y_VALUES = ['top', 'center', 'bottom'];\nconst POS_VALUES = [...X_VALUES, ...Y_VALUES];\nconst CENTER = 'center';\n\n/**\n * Translate CSS values like \"top center\" or \"10% 50%\" as top and left positions (0-1 range)\n * @description The implementation is as close as possible to the \"background-position\" specification\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/background-position}\n */\nexport function parsePoint(value: string | Point): Point {\n    if (!value) {\n        return { x: 0.5, y: 0.5 };\n    }\n\n    if (typeof value === 'object') {\n        return value;\n    }\n\n    let tokens = value.toLocaleLowerCase().split(' ').slice(0, 2);\n\n    if (tokens.length === 1) {\n        if (CSS_POSITIONS[tokens[0]]) {\n            tokens = [tokens[0], CENTER];\n        } else {\n            tokens = [tokens[0], tokens[0]];\n        }\n    }\n\n    const xFirst = tokens[1] !== 'left' && tokens[1] !== 'right' && tokens[0] !== 'top' && tokens[0] !== 'bottom';\n\n    tokens = tokens.map((token) => CSS_POSITIONS[token] || token);\n\n    if (!xFirst) {\n        tokens.reverse();\n    }\n\n    const parsed = tokens.join(' ').match(/^([0-9.]+)% ([0-9.]+)%$/);\n\n    if (parsed) {\n        return {\n            x: parseFloat(parsed[1]) / 100,\n            y: parseFloat(parsed[2]) / 100,\n        };\n    } else {\n        return { x: 0.5, y: 0.5 };\n    }\n}\n\n/**\n * Parse a CSS-like position into an array of position keywords among top, bottom, left, right and center\n * @param value\n * @param [options]\n * @param [options.allowCenter=true] allow \"center center\"\n * @param [options.cssOrder=true] force CSS order (y axis then x axis)\n */\nexport function cleanCssPosition(\n    value: string | string[],\n    { allowCenter, cssOrder } = {\n        allowCenter: true,\n        cssOrder: true,\n    }\n): [string, string] | null {\n    if (!value) {\n        return null;\n    }\n\n    if (typeof value === 'string') {\n        value = value.split(' ');\n    }\n\n    if (value.length === 1) {\n        if (value[0] === CENTER) {\n            value = [CENTER, CENTER];\n        } else if (X_VALUES.indexOf(value[0]) !== -1) {\n            value = [CENTER, value[0]];\n        } else if (Y_VALUES.indexOf(value[0]) !== -1) {\n            value = [value[0], CENTER];\n        }\n    }\n\n    if (value.length !== 2 || POS_VALUES.indexOf(value[0]) === -1 || POS_VALUES.indexOf(value[1]) === -1) {\n        logWarn(`Unparsable position ${value}`);\n        return null;\n    }\n\n    if (!allowCenter && value[0] === CENTER && value[1] === CENTER) {\n        logWarn(`Invalid position center center`);\n        return null;\n    }\n\n    if (cssOrder && !cssPositionIsOrdered(value)) {\n        value = [value[1], value[0]];\n    }\n    if (value[1] === CENTER && X_VALUES.indexOf(value[0]) !== -1) {\n        value = [CENTER, value[0]];\n    }\n    if (value[0] === CENTER && Y_VALUES.indexOf(value[1]) !== -1) {\n        value = [value[1], CENTER];\n    }\n\n    return value as [string, string];\n}\n\n/**\n * Checks if an array of two positions is ordered (y axis then x axis)\n */\nexport function cssPositionIsOrdered(value: string[]): boolean {\n    return Y_VALUES.indexOf(value[0]) !== -1 && X_VALUES.indexOf(value[1]) !== -1;\n}\n\n/**\n * @summary Parses an speed\n * @param speed in radians/degrees/revolutions per second/minute\n * @throws {@link PSVError} when the speed cannot be parsed\n */\nexport function parseSpeed(speed: string | number): number {\n    let parsed;\n\n    if (typeof speed === 'string') {\n        const speedStr = speed.toString().trim();\n\n        // Speed extraction\n        let speedValue = parseFloat(speedStr.replace(/^(-?[0-9]+(?:\\.[0-9]*)?).*$/, '$1'));\n        const speedUnit = speedStr.replace(/^-?[0-9]+(?:\\.[0-9]*)?(.*)$/, '$1').trim();\n\n        // \"per minute\" -> \"per second\"\n        if (speedUnit.match(/(pm|per minute)$/)) {\n            speedValue /= 60;\n        }\n\n        // Which unit?\n        switch (speedUnit) {\n            // Degrees per minute / second\n            case 'dpm':\n            case 'degrees per minute':\n            case 'dps':\n            case 'degrees per second':\n                parsed = MathUtils.degToRad(speedValue);\n                break;\n\n            // Radians per minute / second\n            case 'rdpm':\n            case 'radians per minute':\n            case 'rdps':\n            case 'radians per second':\n                parsed = speedValue;\n                break;\n\n            // Revolutions per minute / second\n            case 'rpm':\n            case 'revolutions per minute':\n            case 'rps':\n            case 'revolutions per second':\n                parsed = speedValue * Math.PI * 2;\n                break;\n\n            // Unknown unit\n            default:\n                throw new PSVError(`Unknown speed unit \"${speedUnit}\"`);\n        }\n    } else {\n        parsed = speed;\n    }\n\n    return parsed;\n}\n\n/**\n * Parses an angle value in radians or degrees and returns a normalized value in radians\n * @param angle - eg: 3.14, 3.14rad, 180deg\n * @param [zeroCenter=false] - normalize between -Pi - Pi instead of 0 - 2*Pi\n * @param [halfCircle=zeroCenter] - normalize between -Pi/2 - Pi/2 instead of -Pi - Pi\n * @throws {@link PSVError} when the angle cannot be parsed\n */\nexport function parseAngle(angle: string | number, zeroCenter = false, halfCircle = zeroCenter): number {\n    let parsed;\n\n    if (typeof angle === 'string') {\n        const match = angle\n            .toLowerCase()\n            .trim()\n            .match(/^(-?[0-9]+(?:\\.[0-9]*)?)(.*)$/);\n\n        if (!match) {\n            throw new PSVError(`Unknown angle \"${angle}\"`);\n        }\n\n        const value = parseFloat(match[1]);\n        const unit = match[2];\n\n        if (unit) {\n            switch (unit) {\n                case 'deg':\n                case 'degs':\n                    parsed = MathUtils.degToRad(value);\n                    break;\n                case 'rad':\n                case 'rads':\n                    parsed = value;\n                    break;\n                default:\n                    throw new PSVError(`Unknown angle unit \"${unit}\"`);\n            }\n        } else {\n            parsed = value;\n        }\n    } else if (typeof angle === 'number' && !isNaN(angle)) {\n        parsed = angle;\n    } else {\n        throw new PSVError(`Unknown angle \"${angle}\"`);\n    }\n\n    parsed = wrap(zeroCenter ? parsed + Math.PI : parsed, Math.PI * 2);\n\n    return zeroCenter\n        ? MathUtils.clamp(parsed - Math.PI, -Math.PI / (halfCircle ? 2 : 1), Math.PI / (halfCircle ? 2 : 1))\n        : parsed;\n}\n\n/**\n * Creates a THREE texture from an image\n */\nexport function createTexture(img: HTMLImageElement | HTMLCanvasElement): Texture {\n    const texture = new Texture(img);\n    texture.needsUpdate = true;\n    texture.minFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.wrapS = RepeatWrapping;\n    texture.repeat.x = -1;\n    return texture;\n}\n\nconst quaternion = new Quaternion();\n\n/**\n * Applies the inverse of Euler angles to a vector\n */\nexport function applyEulerInverse(vector: Vector3, euler: Euler) {\n    quaternion.setFromEuler(euler).invert();\n    vector.applyQuaternion(quaternion);\n}\n\n/**\n * Declaration of configuration parsers, used by {@link getConfigParser}\n */\nexport type ConfigParsers<T, U extends T = T> = {\n    [key in keyof T]: (val: T[key], opts: { defValue: U[key]; rawConfig: T }) => U[key];\n};\n\n/**\n * Result of {@link getConfigParser}\n */\nexport interface ConfigParser<T, U extends T> {\n    (config: T): U;\n    defaults: Required<U>;\n    parsers: ConfigParsers<T, U>;\n}\n\n/**\n * Creates a function to validate an user configuration object\n *\n * @template T type of input config\n * @template U type of config after parsing\n *\n * @param defaults the default configuration\n * @param parsers function used to parse/validate the configuration\n *\n * @example\n * ```ts\n * type MyConfig = {\n *      value: number;\n *      label?: string;\n * };\n *\n * const getConfig<MyConfig>({\n *      value: 1,\n *      label: 'Title',\n * }, {\n *      value(value, { defValue }) {\n *          return value < 10 ? value : defValue;\n *      }\n * });\n *\n * const config = getConfig({ value: 3 });\n * ```\n */\nexport function getConfigParser<T extends Record<string, any>, U extends T = T>(\n    defaults: Required<U>,\n    parsers?: ConfigParsers<T, U>\n): ConfigParser<T, U> {\n    const parser = <ConfigParser<T, U>>function (userConfig: T): U {\n        if (!userConfig) {\n            return clone(defaults);\n        }\n\n        const rawConfig: U = clone({\n            ...defaults,\n            ...userConfig,\n        });\n\n        const config: U = {} as U;\n\n        for (let [key, value] of Object.entries(rawConfig) as [keyof T, any][]) {\n            if (parsers && key in parsers) {\n                value = parsers[key](value, {\n                    rawConfig: rawConfig,\n                    defValue: defaults[key],\n                });\n            } else if (!(key in defaults)) {\n                logWarn(`Unknown option ${key as string}`);\n                continue;\n            }\n\n            // @ts-ignore\n            config[key] = value;\n        }\n\n        return config;\n    };\n\n    parser.defaults = defaults;\n    parser.parsers = parsers || ({} as any);\n\n    return parser;\n}\n","export class PSVError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'PSVError';\n        (Error as any).captureStackTrace?.(this, PSVError);\n    }\n}\n","import { EASINGS } from '../data/constants';\n\n/**\n * Options for {@link Animation}\n */\nexport type AnimationOptions<T> = {\n    /**\n     * interpolated properties\n     */\n    properties: Partial<Record<keyof T, { start: number; end: number }>>;\n    /**\n     * duration of the animation\n     */\n    duration: number;\n    /**\n     * delay before start\n     * @default 0\n     */\n    delay?: number;\n    /**\n     * interpoaltion function, see {@link CONSTANTS.EASINGS}\n     * @default 'linear'\n     */\n    easing?: string | ((t: number) => number);\n    /**\n     * function called for each frame\n     */\n    onTick: (properties: Record<keyof T, number>, progress: number) => void;\n};\n\ntype PropertyValues = AnimationOptions<any>['properties']['k'];\n\n/**\n * @summary Interpolation helper for animations\n * @description\n * Implements the Promise API with an additional \"cancel\" method.\n * The promise is resolved with `true` when the animation is completed and `false` if the animation is cancelled.\n * @template T the type of interpoalted properties\n *\n * @example\n * ```ts\n * const anim = new Animation({\n *     properties: {\n *         width: {start: 100, end: 200}\n *     },\n *     duration: 5000,\n *     onTick: (properties) => element.style.width = `${properties.width}px`;\n * });\n *\n * anim.then((completed) => ...);\n *\n * anim.cancel();\n * ```\n */\nexport class Animation<T = any> implements PromiseLike<boolean> {\n    private options: AnimationOptions<T>;\n    private easing: (t: number) => number = EASINGS['linear'];\n    private callbacks: ((complete: boolean) => void)[] = [];\n    private start?: number;\n    private delayTimeout: ReturnType<typeof setTimeout>;\n    private animationFrame: ReturnType<typeof requestAnimationFrame>;\n\n    resolved = false;\n    cancelled = false;\n\n    constructor(options: AnimationOptions<T>) {\n        this.options = options;\n\n        if (options) {\n            if (options.easing) {\n                this.easing =\n                    typeof options.easing === 'function'\n                        ? options.easing\n                        : EASINGS[options.easing] || EASINGS['linear'];\n            }\n\n            this.delayTimeout = setTimeout(() => {\n                this.delayTimeout = undefined;\n                this.animationFrame = window.requestAnimationFrame((t) => this.__run(t));\n            }, options.delay || 0);\n        } else {\n            this.resolved = true;\n        }\n    }\n\n    private __run(timestamp: number) {\n        if (this.cancelled) {\n            return;\n        }\n\n        // first iteration\n        if (!this.start) {\n            this.start = timestamp;\n        }\n\n        // compute progress\n        const progress = (timestamp - this.start) / this.options.duration;\n        const current = {} as Record<keyof T, number>;\n\n        if (progress < 1.0) {\n            // interpolate properties\n            for (const [name, prop] of Object.entries(this.options.properties) as [string, PropertyValues][]) {\n                if (prop) {\n                    const value = prop.start + (prop.end - prop.start) * this.easing(progress);\n                    // @ts-ignore\n                    current[name] = value;\n                }\n            }\n            this.options.onTick(current, progress);\n\n            this.animationFrame = window.requestAnimationFrame((t) => this.__run(t));\n        } else {\n            // call onTick one last time with final values\n            for (const [name, prop] of Object.entries(this.options.properties) as [string, PropertyValues][]) {\n                if (prop) {\n                    // @ts-ignore\n                    current[name] = prop.end;\n                }\n            }\n            this.options.onTick(current, 1.0);\n\n            this.__resolve(true);\n            this.animationFrame = undefined;\n        }\n    }\n\n    private __resolve(value: boolean) {\n        if (value) {\n            this.resolved = true;\n        } else {\n            this.cancelled = true;\n        }\n        this.callbacks.forEach((cb) => cb(value));\n        this.callbacks.length = 0;\n    }\n\n    /**\n     * Promise chaining\n     * @param [onFulfilled] - Called when the animation is complete (true) or cancelled (false)\n     */\n    then<U>(onFulfilled: (complete: boolean) => PromiseLike<U> | U): Promise<U> {\n        if (this.resolved || this.cancelled) {\n            return Promise.resolve(this.resolved).then(onFulfilled);\n        }\n\n        return new Promise((resolve: (complete: boolean) => void) => {\n            this.callbacks.push(resolve);\n        }).then(onFulfilled);\n    }\n\n    /**\n     * Cancels the animation\n     */\n    cancel() {\n        if (!this.cancelled && !this.resolved) {\n            this.__resolve(false);\n\n            if (this.delayTimeout) {\n                window.clearTimeout(this.delayTimeout);\n                this.delayTimeout = undefined;\n            }\n            if (this.animationFrame) {\n                window.cancelAnimationFrame(this.animationFrame);\n                this.animationFrame = undefined;\n            }\n        }\n    }\n}\n","import { MathUtils } from 'three';\nimport { PSVError } from '../PSVError';\nimport { wrap } from './math';\n\nconst enum DynamicMode {\n    STOP,\n    INFINITE,\n    POSITION,\n}\n\n/**\n * Represents a variable that can dynamically change with time (using requestAnimationFrame)\n */\nexport class Dynamic {\n    private readonly min: number;\n    private readonly max: number;\n    private readonly wrap: boolean;\n\n    private mode = DynamicMode.STOP;\n    private speed = 0;\n    private speedMult = 0;\n    private currentSpeed = 0;\n    private target = 0;\n    private __current = 0;\n\n    get current(): number {\n        return this.__current;\n    }\n\n    private set current(current: number) {\n        this.__current = current;\n    }\n\n    constructor(\n        private readonly fn: (val: number) => void,\n        config: {\n            min: number;\n            max: number;\n            defaultValue: number;\n            wrap: boolean;\n        }\n    ) {\n        this.min = config.min;\n        this.max = config.max;\n        this.wrap = config.wrap;\n        this.current = config.defaultValue;\n\n        if (this.wrap && this.min !== 0) {\n            throw new PSVError('invalid config');\n        }\n\n        if (this.fn) {\n            this.fn(this.current);\n        }\n    }\n\n    /**\n     * Changes base speed\n     */\n    setSpeed(speed: number) {\n        this.speed = speed;\n    }\n\n    /**\n     * Defines the target position\n     */\n    goto(position: number, speedMult = 1) {\n        this.mode = DynamicMode.POSITION;\n        this.target = this.wrap ? wrap(position, this.max) : MathUtils.clamp(position, this.min, this.max);\n        this.speedMult = speedMult;\n    }\n\n    /**\n     * Increases/decreases the target position\n     */\n    step(step: number, speedMult = 1) {\n        if (speedMult === 0) {\n            this.setValue(this.current + step);\n        } else {\n            if (this.mode !== DynamicMode.POSITION) {\n                this.target = this.current;\n            }\n            this.goto(this.target + step, speedMult);\n        }\n    }\n\n    /**\n     * Starts infinite movement\n     */\n    roll(invert = false, speedMult = 1) {\n        this.mode = DynamicMode.INFINITE;\n        this.target = invert ? -Infinity : Infinity;\n        this.speedMult = speedMult;\n    }\n\n    /**\n     * Stops movement\n     */\n    stop() {\n        this.mode = DynamicMode.STOP;\n    }\n\n    /**\n     * Defines the current position and immediately stops movement\n     * @param {number} value\n     */\n    setValue(value: number): boolean {\n        this.target = this.wrap ? wrap(value, this.max) : MathUtils.clamp(value, this.min, this.max);\n        this.mode = DynamicMode.STOP;\n        this.currentSpeed = 0;\n        if (this.target !== this.current) {\n            this.current = this.target;\n            if (this.fn) {\n                this.fn(this.current);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @internal\n     */\n    update(elapsed: number): boolean {\n        // in position mode switch to stop mode when in the decceleration window\n        if (this.mode === DynamicMode.POSITION) {\n            // in loop mode, alter \"current\" to avoid crossing the origin\n            if (this.wrap && Math.abs(this.target - this.current) > this.max / 2) {\n                this.current = this.current < this.target ? this.current + this.max : this.current - this.max;\n            }\n\n            const dstStop = (this.currentSpeed * this.currentSpeed) / (this.speed * this.speedMult * 4);\n            if (Math.abs(this.target - this.current) <= dstStop) {\n                this.mode = DynamicMode.STOP;\n            }\n        }\n\n        // compute speed\n        let targetSpeed = this.mode === DynamicMode.STOP ? 0 : this.speed * this.speedMult;\n        if (this.target < this.current) {\n            targetSpeed = -targetSpeed;\n        }\n        if (this.currentSpeed < targetSpeed) {\n            this.currentSpeed = Math.min(\n                targetSpeed,\n                this.currentSpeed + (elapsed / 1000) * this.speed * this.speedMult * 2\n            );\n        } else if (this.currentSpeed > targetSpeed) {\n            this.currentSpeed = Math.max(\n                targetSpeed,\n                this.currentSpeed - (elapsed / 1000) * this.speed * this.speedMult * 2\n            );\n        }\n\n        // compute new position\n        let next = null;\n        if (this.current > this.target && this.currentSpeed) {\n            next = Math.max(this.target, this.current + (this.currentSpeed * elapsed) / 1000);\n        } else if (this.current < this.target && this.currentSpeed) {\n            next = Math.min(this.target, this.current + (this.currentSpeed * elapsed) / 1000);\n        }\n\n        // apply value\n        if (next !== null) {\n            next = this.wrap ? wrap(next, this.max) : MathUtils.clamp(next, this.min, this.max);\n            if (next !== this.current) {\n                this.current = next;\n                if (this.fn) {\n                    this.fn(this.current);\n                }\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n","import { Dynamic } from './Dynamic';\n\n/**\n * Wrapper for multiple {@link Dynamic} evolving together\n */\nexport class MultiDynamic<T extends Record<string, Dynamic>> {\n    get current(): Record<keyof T, number> {\n        return Object.entries(this.dynamics).reduce((values, [name, dynamic]) => {\n            // @ts-ignore\n            values[name] = dynamic.current;\n            return values;\n        }, {} as Record<keyof T, number>);\n    }\n\n    constructor(private readonly fn: (val: Record<keyof T, number>) => void, private readonly dynamics: T) {\n        if (this.fn) {\n            this.fn(this.current);\n        }\n    }\n\n    /**\n     * Changes base speed\n     */\n    setSpeed(speed: number) {\n        for (const d of Object.values(this.dynamics)) {\n            d.setSpeed(speed);\n        }\n    }\n\n    /**\n     * Defines the target positions\n     */\n    goto(positions: Partial<Record<keyof T, number>>, speedMult = 1) {\n        for (const [name, position] of Object.entries(positions)) {\n            this.dynamics[name].goto(position as number, speedMult);\n        }\n    }\n\n    /**\n     * Increase/decrease the target positions\n     */\n    step(steps: Partial<Record<keyof T, number>>, speedMult = 1) {\n        if (speedMult === 0) {\n            this.setValue(\n                Object.keys(steps).reduce((values, name: keyof T) => {\n                    values[name] = steps[name] + this.dynamics[name].current;\n                    return values;\n                }, {} as typeof steps)\n            );\n        } else {\n            for (const [name, step] of Object.entries(steps)) {\n                this.dynamics[name].step(step as number, speedMult);\n            }\n        }\n    }\n\n    /**\n     * Starts infinite movements\n     */\n    roll(rolls: Partial<Record<keyof T, boolean>>, speedMult = 1) {\n        for (const [name, roll] of Object.entries(rolls)) {\n            this.dynamics[name].roll(roll, speedMult);\n        }\n    }\n\n    /**\n     * Stops movements\n     */\n    stop() {\n        for (const d of Object.values(this.dynamics)) {\n            d.stop();\n        }\n    }\n\n    /**\n     * Defines the current positions and immediately stops movements\n     */\n    setValue(values: Partial<Record<keyof T, number>>): boolean {\n        let hasUpdates = false;\n\n        for (const [name, value] of Object.entries(values)) {\n            hasUpdates = this.dynamics[name].setValue(value as number) || hasUpdates;\n        }\n\n        if (hasUpdates && this.fn) {\n            this.fn(this.current);\n        }\n\n        return hasUpdates;\n    }\n\n    /**\n     * @internal\n     */\n    update(elapsed: number): boolean {\n        let hasUpdates = false;\n\n        for (const d of Object.values(this.dynamics)) {\n            hasUpdates = d.update(elapsed) || hasUpdates;\n        }\n\n        if (hasUpdates && this.fn) {\n            this.fn(this.current);\n        }\n\n        return hasUpdates;\n    }\n}\n","/**\n * Helper for pressable things (buttons, keyboard)\n * @description When the pressed thing goes up and was not pressed long enough, wait a bit more before execution\n * @internal\n */\nexport class PressHandler {\n    private time = 0;\n    private timeout: ReturnType<typeof setTimeout>;\n\n    get pending() {\n        return this.time !== 0;\n    }\n\n    constructor(private readonly delay = 200) {\n        this.delay = delay;\n    }\n\n    down() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = undefined;\n        }\n\n        this.time = new Date().getTime();\n    }\n\n    up(cb: () => void) {\n        if (!this.time) {\n            return;\n        }\n\n        const elapsed = Date.now() - this.time;\n        if (elapsed < this.delay) {\n            this.timeout = setTimeout(() => {\n                cb();\n                this.timeout = undefined;\n                this.time = 0;\n            }, this.delay);\n        } else {\n            cb();\n            this.time = 0;\n        }\n    }\n}\n","/**\n * Direction of a {@link Slider}\n */\nexport enum SliderDirection {\n    VERTICAL = 'VERTICAL',\n    HORIZONTAL = 'HORIZONTAL',\n}\n\n/**\n * Data transmitted to the {@link Slider} listener\n */\nexport type SliderUpdateData = {\n    /**\n     * slider progression for 0-1\n     */\n    readonly value: number;\n\n    /**\n     * the user clicked on the slider\n     */\n    readonly click: boolean;\n\n    /**\n     * the user moves the cursor above the slider, without click\n     */\n    readonly mouseover: boolean;\n\n    /**\n     * the user moves the cursor above the slider while maintaining click\n     */\n    readonly mousedown: boolean;\n\n    /**\n     * the cursor position on the page\n     */\n    readonly cursor: { clientX: number; clientY: number };\n};\n\n/**\n * Helper to make sliders elements\n */\nexport class Slider {\n    private mousedown = false;\n    private mouseover = false;\n\n    get isVertical() {\n        return this.direction === SliderDirection.VERTICAL;\n    }\n\n    get isHorizontal() {\n        return this.direction === SliderDirection.HORIZONTAL;\n    }\n\n    constructor(\n        /** main container of the sliding element */\n        private readonly container: HTMLElement,\n        /** direction of the slider */\n        private readonly direction: SliderDirection,\n        /** callback when the user interacts with the slider */\n        private readonly listener: (data: SliderUpdateData) => void\n    ) {\n        this.container.addEventListener('click', this);\n        this.container.addEventListener('mousedown', this);\n        this.container.addEventListener('mouseenter', this);\n        this.container.addEventListener('mouseleave', this);\n        this.container.addEventListener('touchstart', this);\n        this.container.addEventListener('mousemove', this, true);\n        this.container.addEventListener('touchmove', this, true);\n        window.addEventListener('mouseup', this);\n        window.addEventListener('touchend', this);\n    }\n\n    destroy() {\n        window.removeEventListener('mouseup', this);\n        window.removeEventListener('touchend', this);\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        // prettier-ignore\n        switch (e.type) {\n            case 'click': e.stopPropagation(); break;\n            case 'mousedown': this.__onMouseDown(e as MouseEvent); break;\n            case 'mouseenter': this.__onMouseEnter(e as MouseEvent); break;\n            case 'mouseleave': this.__onMouseLeave(e as MouseEvent); break;\n            case 'touchstart': this.__onTouchStart(e as TouchEvent); break;\n            case 'mousemove': this.__onMouseMove(e as MouseEvent); break;\n            case 'touchmove': this.__onTouchMove(e as TouchEvent); break;\n            case 'mouseup': this.__onMouseUp(e as MouseEvent); break;\n            case 'touchend': this.__onTouchEnd(e as TouchEvent); break;\n        }\n    }\n\n    private __onMouseDown(evt: MouseEvent) {\n        this.mousedown = true;\n        this.__update(evt.clientX, evt.clientY, true);\n    }\n\n    private __onMouseEnter(evt: MouseEvent) {\n        this.mouseover = true;\n        this.__update(evt.clientX, evt.clientY, true);\n    }\n\n    private __onTouchStart(evt: TouchEvent) {\n        this.mouseover = true;\n        this.mousedown = true;\n        const touch = evt.changedTouches[0];\n        this.__update(touch.clientX, touch.clientY, true);\n    }\n\n    private __onMouseMove(evt: MouseEvent) {\n        if (this.mousedown || this.mouseover) {\n            evt.stopPropagation();\n            this.__update(evt.clientX, evt.clientY, true);\n        }\n    }\n\n    private __onTouchMove(evt: TouchEvent) {\n        if (this.mousedown || this.mouseover) {\n            evt.stopPropagation();\n            const touch = evt.changedTouches[0];\n            this.__update(touch.clientX, touch.clientY, true);\n        }\n    }\n\n    private __onMouseUp(evt: MouseEvent) {\n        if (this.mousedown) {\n            this.mousedown = false;\n            this.__update(evt.clientX, evt.clientY, false);\n        }\n    }\n\n    private __onMouseLeave(evt: MouseEvent) {\n        if (this.mouseover) {\n            this.mouseover = false;\n            this.__update(evt.clientX, evt.clientY, true);\n        }\n    }\n\n    private __onTouchEnd(evt: TouchEvent) {\n        if (this.mousedown) {\n            this.mouseover = false;\n            this.mousedown = false;\n            const touch = evt.changedTouches[0];\n            this.__update(touch.clientX, touch.clientY, false);\n        }\n    }\n\n    private __update(clientX: number, clientY: number, moving: boolean) {\n        const boundingClientRect = this.container.getBoundingClientRect();\n        const cursor = this.isVertical ? clientY : clientX;\n        const pos = boundingClientRect[this.isVertical ? 'bottom' : 'left'];\n        const size = boundingClientRect[this.isVertical ? 'height' : 'width'];\n        const val = Math.abs((pos - cursor) / size);\n\n        this.listener({\n            value: val,\n            click: !moving,\n            mousedown: this.mousedown,\n            mouseover: this.mouseover,\n            cursor: { clientX, clientY },\n        });\n    }\n}\n","import { Mesh } from 'three';\nimport { TypedEvent } from './lib/TypedEventTarget';\nimport { ClickData, Point, Position, Size, TextureData, ViewerConfig } from './model';\nimport type { Viewer } from './Viewer';\n\n/**\n * Base class for all events dispatched by {@link Viewer}\n */\nexport abstract class ViewerEvent extends TypedEvent<Viewer> {}\n\n/**\n * @event Triggered before an animation, can be cancelled\n */\nexport class BeforeAnimateEvent extends ViewerEvent {\n    static override readonly type = 'before-animate';\n    override type: 'before-animate';\n\n    /** @internal */\n    constructor(\n        /** target position, can be modified */\n        public position?: Position,\n        /** target zoom level, can be modified */\n        public zoomLevel?: number\n    ) {\n        super(BeforeAnimateEvent.type, true);\n    }\n}\n\n/**\n * @event Triggered before a render\n */\nexport class BeforeRenderEvent extends ViewerEvent {\n    static override readonly type = 'before-render';\n    override type: 'before-render';\n\n    /** @internal */\n    constructor(\n        /** time provided by requestAnimationFrame */\n        public readonly timestamp: number,\n        /**  time elapsed since the previous frame */\n        public readonly elapsed: number\n    ) {\n        super(BeforeRenderEvent.type);\n    }\n}\n\n/**\n * @event Triggered before a rotate operation, can be cancelled\n */\nexport class BeforeRotateEvent extends ViewerEvent {\n    static override readonly type = 'before-rotate';\n    override type: 'before-rotate';\n\n    /** @internal */\n    constructor(\n        /** target position, can be modified */\n        public position: Position\n    ) {\n        super(BeforeRotateEvent.type, true);\n    }\n}\n\n/**\n * @event Triggered when the user clicks on the viewer (everywhere excluding the navbar and the side panel)\n */\nexport class ClickEvent extends ViewerEvent {\n    static override readonly type = 'click';\n    override type: 'click';\n\n    /** @internal */\n    constructor(public readonly data: ClickData) {\n        super(ClickEvent.type);\n    }\n}\n\n/**\n * @event Triggered when some options are changed\n */\nexport class ConfigChangedEvent extends ViewerEvent {\n    static override readonly type = 'config-changed';\n    override type: 'config-changed';\n\n    /** @internal */\n    constructor(public readonly options: Array<keyof ViewerConfig>) {\n        super(ConfigChangedEvent.type);\n    }\n\n    /**\n     * Checks if at least one of the `options` has been modified\n     */\n    containsOptions(...options: Array<keyof ViewerConfig>): boolean {\n        return options.some((option) => this.options.includes(option));\n    }\n}\n\n/**\n * @event Triggered when the user double clicks on the viewer. The simple `click` event is always fired before `dblclick`.\n */\nexport class DoubleClickEvent extends ViewerEvent {\n    static override readonly type = 'dblclick';\n    override type: 'dblclick';\n\n    /** @internal */\n    constructor(public readonly data: ClickData) {\n        super(DoubleClickEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the fullscreen is enabled/disabled\n */\nexport class FullscreenEvent extends ViewerEvent {\n    static override readonly type = 'fullscreen';\n    override type: 'fullscreen';\n\n    /** @internal */\n    constructor(public readonly fullscreenEnabled: boolean) {\n        super(FullscreenEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the notification is hidden\n */\nexport class HideNotificationEvent extends ViewerEvent {\n    static override readonly type = 'hide-notification';\n    override type: 'hide-notification';\n\n    /** @internal */\n    constructor(public readonly notificationId?: string) {\n        super(HideNotificationEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the overlay is hidden\n */\nexport class HideOverlayEvent extends ViewerEvent {\n    static override readonly type = 'hide-overlay';\n    override type: 'hide-overlay';\n\n    /** @internal */\n    constructor(public readonly overlayId?: string) {\n        super(HideOverlayEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the panel is hidden\n */\nexport class HidePanelEvent extends ViewerEvent {\n    static override readonly type = 'hide-panel';\n    override type: 'hide-panel';\n\n    /** @internal */\n    constructor(public readonly panelId?: string) {\n        super(HidePanelEvent.type);\n    }\n}\n\n/**\n * @event Triggered when a key is pressed, can be cancelled\n */\nexport class KeypressEvent extends ViewerEvent {\n    static override readonly type = 'key-press';\n    override type: 'key-press';\n\n    /** @internal */\n    constructor(public readonly key: string) {\n        super(KeypressEvent.type, true);\n    }\n}\n\n/**\n * @event Triggered when the loader value changes\n */\nexport class LoadProgressEvent extends ViewerEvent {\n    static override readonly type = 'load-progress';\n    override type: 'load-progress';\n\n    /** @internal */\n    constructor(public readonly progress: number) {\n        super(LoadProgressEvent.type);\n    }\n}\n\n/**\n * @event Triggered when a panorama image has been loaded\n */\nexport class PanoramaLoadedEvent extends ViewerEvent {\n    static override readonly type = 'panorama-loaded';\n    override type: 'panorama-loaded';\n\n    /** @internal */\n    constructor(public readonly data: TextureData) {\n        super(PanoramaLoadedEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the view angles change\n */\nexport class PositionUpdatedEvent extends ViewerEvent {\n    static override readonly type = 'position-updated';\n    override type: 'position-updated';\n\n    /** @internal */\n    constructor(public readonly position: Position) {\n        super(PositionUpdatedEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the panorama image has been loaded and the viewer is ready to perform the first render\n */\nexport class ReadyEvent extends ViewerEvent {\n    static override readonly type = 'ready';\n    override type: 'ready';\n\n    /** @internal */\n    constructor() {\n        super(ReadyEvent.type);\n    }\n}\n\n/**\n * @event Triggered on each viewer render\n */\nexport class RenderEvent extends ViewerEvent {\n    static override readonly type = 'render';\n    override type: 'render';\n\n    /** @internal */\n    constructor() {\n        super(RenderEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the notification is shown\n */\nexport class ShowNotificationEvent extends ViewerEvent {\n    static override readonly type = 'show-notification';\n    override type: 'show-notification';\n\n    /** @internal */\n    constructor(public readonly notificationId?: string) {\n        super(ShowNotificationEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the overlay is shown\n */\nexport class ShowOverlayEvent extends ViewerEvent {\n    static override readonly type = 'show-overlay';\n    override type: 'show-overlay';\n\n    /** @internal */\n    constructor(public readonly overlayId?: string) {\n        super(ShowOverlayEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the panel is shown\n */\nexport class ShowPanelEvent extends ViewerEvent {\n    static override readonly type = 'show-panel';\n    override type: 'show-panel';\n\n    /** @internal */\n    constructor(public readonly panelId?: string) {\n        super(ShowPanelEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the viewer size changes\n */\nexport class SizeUpdatedEvent extends ViewerEvent {\n    static override readonly type = 'size-updated';\n    override type: 'size-updated';\n\n    /** @internal */\n    constructor(public readonly size: Size) {\n        super(SizeUpdatedEvent.type);\n    }\n}\n\n/**\n * @event Triggered when all current animations are stopped\n */\nexport class StopAllEvent extends ViewerEvent {\n    static override readonly type = 'stop-all';\n    override type: 'stop-all';\n\n    /** @internal */\n    constructor() {\n        super(StopAllEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the viewer zoom changes\n */\nexport class ZoomUpdatedEvent extends ViewerEvent {\n    static override readonly type = 'zoom-updated';\n    override type: 'zoom-updated';\n\n    /** @internal */\n    constructor(public readonly zoomLevel: number) {\n        super(ZoomUpdatedEvent.type);\n    }\n}\n\n/**\n * Base class for events on three.js objects\n *\n * Note: {@link Viewer#observeObjects} must be called for these events to be dispatched\n */\nexport abstract class ObjectEvent extends ViewerEvent {\n    /** @internal */\n    constructor(\n        type: string,\n        public readonly originalEvent: MouseEvent,\n        public readonly object: Mesh<any, any>,\n        public readonly viewerPoint: Point,\n        public readonly userDataKey: string\n    ) {\n        super(type);\n    }\n}\n\n/**\n * @event Triggered when the cursor enters an object in the scene\n *\n * Note: {@link Viewer#observeObjects} must be called for this event to be dispatched\n */\nexport class ObjectEnterEvent extends ObjectEvent {\n    static override readonly type = 'enter-object';\n    override type: 'enter-object';\n\n    /** @internal */\n    constructor(originalEvent: MouseEvent, object: Mesh, viewerPoint: Point, userDataKey: string) {\n        super(ObjectEnterEvent.type, originalEvent, object, viewerPoint, userDataKey);\n    }\n}\n\n/**\n * @event Triggered when the cursor leaves an object in the scene\n *\n * Note: {@link Viewer#observeObjects} must be called for this event to be dispatched\n */\nexport class ObjectLeaveEvent extends ObjectEvent {\n    static override readonly type = 'leave-object';\n    override type: 'leave-object';\n\n    /** @internal */\n    constructor(originalEvent: MouseEvent, object: Mesh, viewerPoint: Point, userDataKey: string) {\n        super(ObjectLeaveEvent.type, originalEvent, object, viewerPoint, userDataKey);\n    }\n}\n\n/**\n * @event Triggered when the cursor moves over an object in the scene\n *\n * Note: {@link Viewer#observeObjects} must be called for this event to be dispatched\n */\nexport class ObjectHoverEvent extends ObjectEvent {\n    static override readonly type = 'hover-object';\n    override type: 'hover-object';\n\n    /** @internal */\n    constructor(originalEvent: MouseEvent, object: Mesh, viewerPoint: Point, userDataKey: string) {\n        super(ObjectHoverEvent.type, originalEvent, object, viewerPoint, userDataKey);\n    }\n}\n\nexport type ViewerEvents =\n    | BeforeAnimateEvent\n    | BeforeRenderEvent\n    | BeforeRotateEvent\n    | ClickEvent\n    | ConfigChangedEvent\n    | DoubleClickEvent\n    | FullscreenEvent\n    | HideNotificationEvent\n    | HideOverlayEvent\n    | HidePanelEvent\n    | KeypressEvent\n    | LoadProgressEvent\n    | PanoramaLoadedEvent\n    | PositionUpdatedEvent\n    | ReadyEvent\n    | RenderEvent\n    | ShowNotificationEvent\n    | ShowOverlayEvent\n    | ShowPanelEvent\n    | SizeUpdatedEvent\n    | StopAllEvent\n    | ZoomUpdatedEvent\n    | ObjectEnterEvent\n    | ObjectLeaveEvent\n    | ObjectHoverEvent;\n","/**\n * Base class for events dispatched by {@link TypedEventTarget}\n * @template TTarget type of the event target\n */\nexport abstract class TypedEvent<TTarget extends TypedEventTarget<any>> extends Event {\n    static readonly type: string;\n\n    override target: TTarget;\n\n    constructor(type: string, cancelable = false) {\n        super(type, { cancelable });\n    }\n}\n\n/**\n * Decorator for EventTarget allowing to strongly type events and listeners\n * @link https://rjzaworski.com/2021/06/event-target-with-typescript\n * @template TEvents union of dispatched events\n */\nexport class TypedEventTarget<TEvents extends TypedEvent<any>> extends EventTarget {\n    override dispatchEvent(e: TEvents): boolean {\n        return super.dispatchEvent(e);\n    }\n\n    /**\n     * @template T the name of event\n     * @template E the class of the event\n     */\n    override addEventListener<T extends TEvents['type'], E extends TEvents & { type: T }>(\n        type: T,\n        callback: ((e: E) => void) | EventListenerObject | null,\n        options?: AddEventListenerOptions | boolean\n    ) {\n        super.addEventListener(type, callback as any, options);\n    }\n\n    /**\n     * @template T the name of event\n     * @template E the class of the event\n     */\n    override removeEventListener<T extends TEvents['type'], E extends TEvents & { type: T }>(\n        type: TEvents['type'],\n        callback: ((e: E) => void) | EventListenerObject | null,\n        options?: EventListenerOptions | boolean\n    ) {\n        super.removeEventListener(type, callback as any, options);\n    }\n}\n","import { Mesh, ShaderMaterial, ShaderMaterialParameters, Texture } from 'three';\nimport { PanoData, PanoDataProvider, TextureData } from '../model';\nimport type { Viewer } from '../Viewer';\n\n/**\n * Base class for adapters\n * @template TPanorama type of the panorama object\n * @template TTexture type of the loaded texture\n */\nexport abstract class AbstractAdapter<TPanorama, TTexture> {\n    /**\n     * Unique identifier of the adapter\n     */\n    static readonly id: string;\n\n    /**\n     * Indicates if the adapter supports panorama download natively\n     */\n    static readonly supportsDownload: boolean = false;\n\n    /**\n     * Indicates if the adapter can display an additional transparent image above the panorama\n     */\n    static readonly supportsOverlay: boolean = false;\n\n    constructor(protected readonly viewer: Viewer) {}\n\n    /**\n     * Destroys the adapter\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    destroy(): void {}\n\n    /**\n     * Indicates if the adapter supports transitions between panoramas\n     */\n    // @ts-ignore unused paramater\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    supportsTransition(panorama: TPanorama): boolean {\n        return false;\n    }\n\n    /**\n     * Indicates if the adapter supports preload of a panorama\n     */\n    // @ts-ignore unused paramater\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    supportsPreload(panorama: TPanorama): boolean {\n        return false;\n    }\n\n    /**\n     * Loads the panorama texture\n     */\n    abstract loadTexture(\n        panorama: TPanorama,\n        newPanoData?: PanoData | PanoDataProvider,\n        useXmpPanoData?: boolean\n    ): Promise<TextureData<TTexture, TPanorama>>;\n\n    /**\n     * Creates the mesh\n     */\n    abstract createMesh(scale?: number): Mesh;\n\n    /**\n     * Applies the texture to the mesh\n     */\n    abstract setTexture(mesh: Mesh, textureData: TextureData<TTexture, TPanorama>, transition?: boolean): void;\n\n    /**\n     * Changes the opacity of the mesh\n     */\n    abstract setTextureOpacity(mesh: Mesh, opacity: number): void;\n\n    /**\n     * Clear a loaded texture from memory\n     */\n    abstract disposeTexture(textureData: TextureData<TTexture, TPanorama>): void;\n\n    /**\n     * Applies the overlay to the mesh\n     */\n    abstract setOverlay(mesh: Mesh, textureData: TextureData<TTexture, TPanorama>, opacity: number): void;\n\n    /**\n     * @internal\n     */\n    static OVERLAY_UNIFORMS = {\n        panorama: 'panorama',\n        overlay: 'overlay',\n        globalOpacity: 'globalOpacity',\n        overlayOpacity: 'overlayOpacity',\n    };\n\n    /**\n     * @internal\n     */\n    static createOverlayMaterial({\n        additionalUniforms,\n        overrideVertexShader,\n    }: {\n        additionalUniforms?: ShaderMaterialParameters['uniforms'];\n        overrideVertexShader?: ShaderMaterialParameters['vertexShader'];\n    } = {}): ShaderMaterial {\n        return new ShaderMaterial({\n            uniforms: {\n                ...additionalUniforms,\n                [AbstractAdapter.OVERLAY_UNIFORMS.panorama]: { value: new Texture() },\n                [AbstractAdapter.OVERLAY_UNIFORMS.overlay]: { value: new Texture() },\n                [AbstractAdapter.OVERLAY_UNIFORMS.globalOpacity]: { value: 1.0 },\n                [AbstractAdapter.OVERLAY_UNIFORMS.overlayOpacity]: { value: 1.0 },\n            },\n\n            vertexShader:\n                overrideVertexShader ||\n                `\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix *  modelViewMatrix * vec4( position, 1.0 );\n}`,\n\n            fragmentShader: `\nuniform sampler2D ${AbstractAdapter.OVERLAY_UNIFORMS.panorama};\nuniform sampler2D ${AbstractAdapter.OVERLAY_UNIFORMS.overlay};\nuniform float ${AbstractAdapter.OVERLAY_UNIFORMS.globalOpacity};\nuniform float ${AbstractAdapter.OVERLAY_UNIFORMS.overlayOpacity};\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 tColor1 = texture2D( ${AbstractAdapter.OVERLAY_UNIFORMS.panorama}, vUv );\n  vec4 tColor2 = texture2D( ${AbstractAdapter.OVERLAY_UNIFORMS.overlay}, vUv );\n  gl_FragColor = vec4(\n    mix( tColor1.rgb, tColor2.rgb, tColor2.a * ${AbstractAdapter.OVERLAY_UNIFORMS.overlayOpacity} ),\n    ${AbstractAdapter.OVERLAY_UNIFORMS.globalOpacity}\n  );\n}`,\n        });\n    }\n}\n\n// prettier-ignore\nexport type AdapterConstructor = (new (viewer: Viewer, config?: any) => AbstractAdapter<any, any>);\n\n/**\n * Returns the adapter constructor from the imported object\n * @internal\n */\nexport function adapterInterop(adapter: any): AdapterConstructor & typeof AbstractAdapter {\n    if (adapter) {\n        for (const [, p] of [['_', adapter], ...Object.entries(adapter)]) {\n            if (p.prototype instanceof AbstractAdapter) {\n                return p;\n            }\n        }\n    }\n    return null;\n}\n","import { BufferGeometry, MathUtils, Mesh, ShaderMaterial, SphereGeometry, Texture } from 'three';\nimport { SPHERE_RADIUS } from '../data/constants';\nimport { SYSTEM } from '../data/system';\nimport { PanoData, PanoDataProvider, TextureData } from '../model';\nimport { PSVError } from '../PSVError';\nimport { createTexture, firstNonNull, getConfigParser, getXMPValue, logWarn } from '../utils';\nimport type { Viewer } from '../Viewer';\nimport { AbstractAdapter } from './AbstractAdapter';\n\n/**\n * Configuration for {@link EquirectangularAdapter}\n */\nexport type EquirectangularAdapterConfig = {\n    /**\n     * number of faces of the sphere geometry, higher values may decrease performances\n     * @default 64\n     */\n    resolution?: number;\n    /**\n     * used for equirectangular tiles adapter\n     * @internal\n     */\n    blur?: boolean;\n};\n\ntype EquirectangularMesh = Mesh<BufferGeometry, ShaderMaterial>;\ntype EquirectangularTexture = TextureData<Texture, string>;\n\nconst getConfig = getConfigParser<EquirectangularAdapterConfig>(\n    {\n        resolution: 64,\n        blur: false,\n    },\n    {\n        resolution: (resolution) => {\n            if (!resolution || !MathUtils.isPowerOfTwo(resolution)) {\n                throw new PSVError('EquirectangularAdapter resolution must be power of two');\n            }\n            return resolution;\n        },\n    }\n);\n\n/**\n * Adapter for equirectangular panoramas\n */\nexport class EquirectangularAdapter extends AbstractAdapter<string, Texture> {\n    static override readonly id: string = 'equirectangular';\n    static override readonly supportsDownload: boolean = true;\n    static override readonly supportsOverlay: boolean = true;\n\n    private readonly config: EquirectangularAdapterConfig;\n\n    private readonly SPHERE_SEGMENTS: number;\n    private readonly SPHERE_HORIZONTAL_SEGMENTS: number;\n\n    constructor(viewer: Viewer, config?: EquirectangularAdapterConfig) {\n        super(viewer);\n\n        this.config = getConfig(config);\n\n        this.SPHERE_SEGMENTS = this.config.resolution;\n        this.SPHERE_HORIZONTAL_SEGMENTS = this.SPHERE_SEGMENTS / 2;\n    }\n\n    override supportsTransition() {\n        return true;\n    }\n\n    override supportsPreload() {\n        return true;\n    }\n\n    async loadTexture(\n        panorama: string,\n        newPanoData: PanoData | PanoDataProvider,\n        useXmpPanoData = this.viewer.config.useXmpData\n    ): Promise<EquirectangularTexture> {\n        if (typeof panorama !== 'string') {\n            return Promise.reject(new PSVError('Invalid panorama url, are you using the right adapter?'));\n        }\n\n        let img: HTMLImageElement;\n        let xmpPanoData: PanoData;\n\n        if (useXmpPanoData) {\n            xmpPanoData = await this.loadXMP(panorama);\n            img = await this.viewer.textureLoader.loadImage(panorama);\n        } else {\n            img = await this.viewer.textureLoader.loadImage(panorama);\n        }\n\n        if (typeof newPanoData === 'function') {\n            newPanoData = newPanoData(img);\n        }\n\n        const panoData = {\n            fullWidth: firstNonNull(newPanoData?.fullWidth, xmpPanoData?.fullWidth, img.width),\n            fullHeight: firstNonNull(newPanoData?.fullHeight, xmpPanoData?.fullHeight, img.height),\n            croppedWidth: firstNonNull(newPanoData?.croppedWidth, xmpPanoData?.croppedWidth, img.width),\n            croppedHeight: firstNonNull(newPanoData?.croppedHeight, xmpPanoData?.croppedHeight, img.height),\n            croppedX: firstNonNull(newPanoData?.croppedX, xmpPanoData?.croppedX, 0),\n            croppedY: firstNonNull(newPanoData?.croppedY, xmpPanoData?.croppedY, 0),\n            poseHeading: firstNonNull(newPanoData?.poseHeading, xmpPanoData?.poseHeading, 0),\n            posePitch: firstNonNull(newPanoData?.posePitch, xmpPanoData?.posePitch, 0),\n            poseRoll: firstNonNull(newPanoData?.poseRoll, xmpPanoData?.poseRoll, 0),\n        };\n\n        if (panoData.croppedWidth !== img.width || panoData.croppedHeight !== img.height) {\n            logWarn(`Invalid panoData, croppedWidth and/or croppedHeight is not coherent with loaded image.\n              panoData: ${panoData.croppedWidth}x${panoData.croppedHeight}, image: ${img.width}x${img.height}`);\n        }\n        if ((newPanoData || xmpPanoData) && panoData.fullWidth !== panoData.fullHeight * 2) {\n            logWarn('Invalid panoData, fullWidth should be twice fullHeight');\n        }\n\n        const texture = this.createEquirectangularTexture(img, panoData);\n\n        return { panorama, texture, panoData };\n    }\n\n    /**\n     * Loads the XMP data of an image\n     */\n    private async loadXMP(panorama: string, onProgress?: (p: number) => void): Promise<PanoData> {\n        const blob = await this.viewer.textureLoader.loadFile(panorama, onProgress);\n        const binary = await this.loadBlobAsString(blob);\n\n        const a = binary.indexOf('<x:xmpmeta');\n        const b = binary.indexOf('</x:xmpmeta>');\n        const data = binary.substring(a, b);\n\n        if (a !== -1 && b !== -1 && data.includes('GPano:')) {\n            return {\n                fullWidth: getXMPValue(data, 'FullPanoWidthPixels'),\n                fullHeight: getXMPValue(data, 'FullPanoHeightPixels'),\n                croppedWidth: getXMPValue(data, 'CroppedAreaImageWidthPixels'),\n                croppedHeight: getXMPValue(data, 'CroppedAreaImageHeightPixels'),\n                croppedX: getXMPValue(data, 'CroppedAreaLeftPixels'),\n                croppedY: getXMPValue(data, 'CroppedAreaTopPixels'),\n                poseHeading: getXMPValue(data, 'PoseHeadingDegrees'),\n                posePitch: getXMPValue(data, 'PosePitchDegrees'),\n                poseRoll: getXMPValue(data, 'PoseRollDegrees'),\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Reads a Blob as a string\n     */\n    private loadBlobAsString(blob: Blob): Promise<string> {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result as string);\n            reader.onerror = reject;\n            reader.readAsText(blob);\n        });\n    }\n\n    /**\n     * Creates the final texture from image and panorama data\n     */\n    private createEquirectangularTexture(img: HTMLImageElement, panoData: PanoData): Texture {\n        // resize image / fill cropped parts with black\n        if (this.config.blur\n            || panoData.fullWidth > SYSTEM.maxTextureWidth\n            || panoData.croppedWidth !== panoData.fullWidth\n            || panoData.croppedHeight !== panoData.fullHeight\n        ) {\n            const ratio = Math.min(1, SYSTEM.maxCanvasWidth / panoData.fullWidth);\n\n            const resizedPanoData = {\n                fullWidth: panoData.fullWidth * ratio,\n                fullHeight: panoData.fullHeight * ratio,\n                croppedWidth: panoData.croppedWidth * ratio,\n                croppedHeight: panoData.croppedHeight * ratio,\n                croppedX: panoData.croppedX * ratio,\n                croppedY: panoData.croppedY * ratio,\n            };\n\n            const buffer = document.createElement('canvas');\n            buffer.width = resizedPanoData.fullWidth;\n            buffer.height = resizedPanoData.fullHeight;\n\n            const ctx = buffer.getContext('2d');\n\n            if (this.config.blur) {\n                ctx.filter = 'blur(1px)';\n            }\n\n            ctx.drawImage(\n                img,\n                resizedPanoData.croppedX,\n                resizedPanoData.croppedY,\n                resizedPanoData.croppedWidth,\n                resizedPanoData.croppedHeight\n            );\n\n            return createTexture(buffer);\n        }\n\n        return createTexture(img);\n    }\n\n    createMesh(scale = 1): EquirectangularMesh {\n        // The middle of the panorama is placed at yaw=0\n        const geometry = new SphereGeometry(\n            SPHERE_RADIUS * scale,\n            this.SPHERE_SEGMENTS,\n            this.SPHERE_HORIZONTAL_SEGMENTS,\n            -Math.PI / 2\n        ).scale(1, 1, 1) as SphereGeometry;\n\n        const material = AbstractAdapter.createOverlayMaterial();\n\n        return new Mesh(geometry, material);\n    }\n\n    setTexture(mesh: EquirectangularMesh, textureData: EquirectangularTexture) {\n        this.__setUniform(mesh, AbstractAdapter.OVERLAY_UNIFORMS.panorama, textureData.texture);\n        this.setOverlay(mesh, null, 1);\n    }\n\n    setOverlay(mesh: EquirectangularMesh, textureData: EquirectangularTexture, opacity: number) {\n        this.__setUniform(mesh, AbstractAdapter.OVERLAY_UNIFORMS.overlayOpacity, opacity);\n        if (!textureData) {\n            this.__setUniform(mesh, AbstractAdapter.OVERLAY_UNIFORMS.overlay, new Texture());\n        } else {\n            this.__setUniform(mesh, AbstractAdapter.OVERLAY_UNIFORMS.overlay, textureData.texture);\n        }\n    }\n\n    setTextureOpacity(mesh: EquirectangularMesh, opacity: number) {\n        this.__setUniform(mesh, AbstractAdapter.OVERLAY_UNIFORMS.globalOpacity, opacity);\n        mesh.material.transparent = opacity < 1;\n    }\n\n    disposeTexture(textureData: EquirectangularTexture) {\n        textureData.texture?.dispose();\n    }\n\n    private __setUniform(mesh: EquirectangularMesh, uniform: string, value: any) {\n        if (mesh.material.uniforms[uniform].value instanceof Texture) {\n            mesh.material.uniforms[uniform].value.dispose();\n        }\n        mesh.material.uniforms[uniform].value = value;\n    }\n}\n","import { ResolvableBoolean } from '../model';\nimport { PSVError } from '../PSVError';\nimport { VIEWER_DATA } from './constants';\n\nconst LOCALSTORAGE_TOUCH_SUPPORT = `${VIEWER_DATA}_touchSupport`;\n\n/**\n * General information about the system\n */\nexport const SYSTEM = {\n    /**\n     * Indicates if the system data has been loaded\n     */\n    loaded: false,\n\n    /**\n     * Device screen pixel ratio\n     */\n    pixelRatio: 1,\n\n    /**\n     * Device supports WebGL\n     */\n    isWebGLSupported: false,\n\n    /**\n     * Maximum WebGL texture width\n     */\n    maxTextureWidth: 0,\n\n    /**\n     * Device supports touch events\n     */\n    isTouchEnabled: null as ResolvableBoolean,\n\n    /**\n     * Name of the fullscreen event\n     */\n    fullscreenEvent: null as string,\n\n    /**\n     * @internal\n     */\n    __maxCanvasWidth: null as number | null,\n\n    /**\n     * Maximum canvas width\n     */\n    get maxCanvasWidth(): number {\n        if (this.__maxCanvasWidth === null) {\n            this.__maxCanvasWidth = getMaxCanvasWidth(this.maxTextureWidth);\n        }\n        return this.__maxCanvasWidth;\n    },\n\n    /**\n     * Loads the system if not already loaded\n     * @internal\n     */\n    load() {\n        if (!this.loaded) {\n            const ctx = getWebGLCtx();\n\n            this.pixelRatio = window.devicePixelRatio || 1;\n            this.isWebGLSupported = ctx !== null;\n            this.maxTextureWidth = ctx ? ctx.getParameter(ctx.MAX_TEXTURE_SIZE) : 0;\n            this.isTouchEnabled = isTouchEnabled();\n            this.fullscreenEvent = getFullscreenEvent();\n            this.loaded = true;\n        }\n\n        if (!SYSTEM.isWebGLSupported) {\n            throw new PSVError('WebGL is not supported.');\n        }\n        if (SYSTEM.maxTextureWidth === 0) {\n            throw new PSVError('Unable to detect system capabilities');\n        }\n    },\n};\n\n/**\n * Tries to return a canvas webgl context\n */\nfunction getWebGLCtx(): WebGLRenderingContext | null {\n    const canvas = document.createElement('canvas');\n    const names = ['webgl2', 'webgl', 'experimental-webgl', 'moz-webgl', 'webkit-3d'];\n    let context = null;\n\n    if (!canvas.getContext) {\n        return null;\n    }\n\n    if (\n        names.some((name) => {\n            try {\n                context = canvas.getContext(name);\n                return context !== null;\n            } catch (e) {\n                return false;\n            }\n        })\n    ) {\n        return context;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Detects if the user is using a touch screen\n */\nfunction isTouchEnabled(): ResolvableBoolean {\n    let initial = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n    if (LOCALSTORAGE_TOUCH_SUPPORT in localStorage) {\n        initial = localStorage[LOCALSTORAGE_TOUCH_SUPPORT] === 'true';\n    }\n\n    const promise = new Promise<boolean>((resolve) => {\n        const clear = () => {\n            window.removeEventListener('mousedown', listenerMouse);\n            window.removeEventListener('touchstart', listenerTouch);\n            clearTimeout(listenerTimeoutId);\n        };\n\n        const listenerMouse = () => {\n            clear();\n            localStorage[LOCALSTORAGE_TOUCH_SUPPORT] = false;\n            resolve(false);\n        };\n\n        const listenerTouch = () => {\n            clear();\n            localStorage[LOCALSTORAGE_TOUCH_SUPPORT] = true;\n            resolve(true);\n        };\n\n        const listenerTimeout = () => {\n            clear();\n            localStorage[LOCALSTORAGE_TOUCH_SUPPORT] = initial;\n            resolve(initial);\n        };\n\n        window.addEventListener('mousedown', listenerMouse, false);\n        window.addEventListener('touchstart', listenerTouch, false);\n        const listenerTimeoutId = setTimeout(listenerTimeout, 10000);\n    });\n\n    return { initial, promise };\n}\n\n/**\n * Gets max canvas width supported by the browser.\n * We only test powers of 2 and height = width / 2 because that's what we need to generate WebGL textures\n */\nfunction getMaxCanvasWidth(maxWidth: number): number {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = maxWidth;\n    canvas.height = maxWidth / 2;\n\n    while (canvas.width > 1024) {\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, 1, 1);\n\n        try {\n            if (ctx.getImageData(0, 0, 1, 1).data[0] > 0) {\n                return canvas.width;\n            }\n        } catch (e) {\n            // continue\n        }\n\n        canvas.width /= 2;\n        canvas.height /= 2;\n    }\n\n    throw new PSVError('Unable to detect system capabilities');\n}\n\n/**\n * Gets the event name for fullscreen\n */\nfunction getFullscreenEvent(): string {\n    if ('exitFullscreen' in document) {\n        return 'fullscreenchange';\n    }\n    if ('webkitExitFullscreen' in document) {\n        return 'webkitfullscreenchange';\n    }\n    return null;\n}\n","import { MathUtils } from 'three';\nimport { adapterInterop } from '../adapters/AbstractAdapter';\nimport { EquirectangularAdapter } from '../adapters/EquirectangularAdapter';\nimport { ParsedViewerConfig, ReadonlyViewerConfig, ViewerConfig } from '../model';\nimport { pluginInterop } from '../plugins/AbstractPlugin';\nimport { PSVError } from '../PSVError';\nimport { clone, ConfigParsers, getConfigParser, logWarn, parseAngle } from '../utils';\nimport { ACTIONS, KEY_CODES } from './constants';\n\n/**\n * Default options\n */\nexport const DEFAULTS: Required<ParsedViewerConfig> = {\n    panorama: null,\n    overlay: null,\n    overlayOpacity: 1,\n    container: null,\n    camera: null,\n    meshContainer: null,\n    scene: null,\n    adapter: [EquirectangularAdapter as any, null],\n    plugins: [],\n    caption: null,\n    description: null,\n    downloadUrl: null,\n    downloadName: null,\n    loadingImg: null,\n    loadingTxt: 'Loading...',\n    size: null,\n    fisheye: 0,\n    minFov: 30,\n    maxFov: 90,\n    defaultZoomLvl: 50,\n    defaultYaw: 0,\n    defaultPitch: 0,\n    sphereCorrection: null,\n    moveSpeed: 1,\n    zoomSpeed: 1,\n    moveInertia: true,\n    mousewheel: true,\n    mousemove: true,\n    mousewheelCtrlKey: false,\n    touchmoveTwoFingers: false,\n    useXmpData: true,\n    panoData: null,\n    requestHeaders: null,\n    canvasBackground: '#000',\n    withCredentials: false,\n    // prettier-ignore\n    navbar: [\n        'zoom',\n        'move',\n        'download',\n        'description',\n        'caption',\n        'fullscreen',\n    ],\n    lang: {\n        zoom: 'Zoom',\n        zoomOut: 'Zoom out',\n        zoomIn: 'Zoom in',\n        moveUp: 'Move up',\n        moveDown: 'Move down',\n        moveLeft: 'Move left',\n        moveRight: 'Move right',\n        download: 'Download',\n        fullscreen: 'Fullscreen',\n        menu: 'Menu',\n        close: 'Close',\n        twoFingers: 'Use two fingers to navigate',\n        ctrlZoom: 'Use ctrl + scroll to zoom the image',\n        loadError: \"The panorama can't be loaded\",\n    },\n    keyboard: 'fullscreen',\n    keyboardActions: {\n        [KEY_CODES.ArrowUp]: ACTIONS.ROTATE_UP,\n        [KEY_CODES.ArrowDown]: ACTIONS.ROTATE_DOWN,\n        [KEY_CODES.ArrowRight]: ACTIONS.ROTATE_RIGHT,\n        [KEY_CODES.ArrowLeft]: ACTIONS.ROTATE_LEFT,\n        [KEY_CODES.PageUp]: ACTIONS.ZOOM_IN,\n        [KEY_CODES.PageDown]: ACTIONS.ZOOM_OUT,\n        [KEY_CODES.Plus]: ACTIONS.ZOOM_IN,\n        [KEY_CODES.Minus]: ACTIONS.ZOOM_OUT,\n    },\n};\n\n/**\n * List of unmodifiable options and their error messages\n * @internal\n */\nexport const READONLY_OPTIONS: Record<ReadonlyViewerConfig, string> = {\n    panorama: 'Use setPanorama method to change the panorama',\n    panoData: 'Use setPanorama method to change the panorama',\n    overlay: 'Use setOverlay method to changer the overlay',\n    overlayOpacity: 'Use setOverlay method to changer the overlay',\n    container: 'Cannot change viewer container',\n    adapter: 'Cannot change adapter',\n    plugins: 'Cannot change plugins',\n};\n\n/**\n * Parsers/validators for each option\n * @internal\n */\nexport const CONFIG_PARSERS: ConfigParsers<ViewerConfig, ParsedViewerConfig> = {\n    container: (container) => {\n        if (!container) {\n            throw new PSVError('No value given for container.');\n        }\n        return container;\n    },\n    adapter: (adapter, { defValue }) => {\n        if (!adapter) {\n            adapter = defValue;\n        } else if (Array.isArray(adapter)) {\n            adapter = [adapterInterop(adapter[0]), adapter[1]];\n        } else {\n            adapter = [adapterInterop(adapter), null];\n        }\n        if (!adapter[0]) {\n            throw new PSVError('An undefined value was given for adapter.');\n        }\n        if (!(adapter[0] as any).id) {\n            throw new PSVError(`Adapter has no id.`);\n        }\n        return adapter;\n    },\n    overlayOpacity: (overlayOpacity) => {\n        return MathUtils.clamp(overlayOpacity, 0, 1);\n    },\n    defaultYaw: (defaultYaw) => {\n        // defaultYaw is between 0 and PI\n        return parseAngle(defaultYaw);\n    },\n    defaultPitch: (defaultPitch) => {\n        // defaultPitch is between -PI/2 and PI/2\n        return parseAngle(defaultPitch, true);\n    },\n    defaultZoomLvl: (defaultZoomLvl) => {\n        return MathUtils.clamp(defaultZoomLvl, 0, 100);\n    },\n    minFov: (minFov, { rawConfig }) => {\n        // minFov and maxFov must be ordered\n        if (rawConfig.maxFov < minFov) {\n            logWarn('maxFov cannot be lower than minFov');\n            minFov = rawConfig.maxFov;\n        }\n        // minFov between 1 and 179\n        return MathUtils.clamp(minFov, 1, 179);\n    },\n    maxFov: (maxFov, { rawConfig }) => {\n        // minFov and maxFov must be ordered\n        if (maxFov < rawConfig.minFov) {\n            maxFov = rawConfig.minFov;\n        }\n        // maxFov between 1 and 179\n        return MathUtils.clamp(maxFov, 1, 179);\n    },\n    lang: (lang) => {\n        if (Array.isArray(lang.twoFingers)) {\n            logWarn('lang.twoFingers must not be an array');\n            lang.twoFingers = lang.twoFingers[0];\n        }\n        return {\n            ...DEFAULTS.lang,\n            ...lang,\n        };\n    },\n    keyboard: (keyboard) => {\n        if (!keyboard) {\n            return false;\n        }\n        if (typeof keyboard === 'object') {\n            logWarn(`Use keyboardActions to configure the keyboard actions, keyboard option must be either true, false, 'fullscreen' or 'always'`);\n            return 'fullscreen';\n        }\n        return keyboard === 'always' ? 'always' : 'fullscreen';\n    },\n    keyboardActions: (keyboardActions, { rawConfig }) => {\n        if (rawConfig.keyboard && typeof rawConfig.keyboard === 'object') {\n            return rawConfig.keyboard;\n        }\n        return keyboardActions;\n    },\n    fisheye: (fisheye) => {\n        // translate boolean fisheye to amount\n        if (fisheye === true) {\n            return 1;\n        } else if (fisheye === false) {\n            return 0;\n        }\n        return fisheye;\n    },\n    requestHeaders: (requestHeaders) => {\n        if (requestHeaders && typeof requestHeaders === 'object') {\n            return () => requestHeaders;\n        }\n        if (typeof requestHeaders === 'function') {\n            return requestHeaders;\n        }\n        return null;\n    },\n    plugins: (plugins) => {\n        return plugins.map((plugin, i) => {\n            if (Array.isArray(plugin)) {\n                plugin = [pluginInterop(plugin[0]), plugin[1]];\n            } else {\n                plugin = [pluginInterop(plugin), null];\n            }\n            if (!plugin[0]) {\n                throw new PSVError(`An undefined value was given for plugin ${i}.`);\n            }\n            if (!(plugin[0] as any).id) {\n                throw new PSVError(`Plugin ${i} has no id.`);\n            }\n            return plugin;\n        });\n    },\n    navbar: (navbar) => {\n        if (navbar === false) {\n            return null;\n        }\n        if (navbar === true) {\n            // true becomes the default array\n            return clone(DEFAULTS.navbar as string[]);\n        }\n        if (typeof navbar === 'string') {\n            // can be a space or coma separated list\n            return navbar.split(/[ ,]/);\n        }\n        return navbar;\n    },\n};\n\n/**\n * @internal\n */\nexport const getViewerConfig = getConfigParser<ViewerConfig, ParsedViewerConfig>(DEFAULTS, CONFIG_PARSERS);\n","import { TypedEvent, TypedEventTarget } from '../lib/TypedEventTarget';\nimport { ConfigParser, logWarn } from '../utils';\nimport type { Viewer } from '../Viewer';\n\n/**\n * Base class for plugins\n * @template TEvents union of dispatched events\n */\nexport abstract class AbstractPlugin<\n    TEvents extends TypedEvent<AbstractPlugin> = never\n> extends TypedEventTarget<TEvents> {\n    /**\n     * Unique identifier of the plugin\n     */\n    static readonly id: string;\n\n    constructor(protected viewer: Viewer) {\n        super();\n    }\n\n    /**\n     * Initializes the plugin\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n\n    /**\n     * Destroys the plugin\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    destroy() {}\n}\n\n/**\n * Base class for plugins with updatable configuration\n * The implementation must have a static `configParser` property which is the result of {@link utils.getConfigParser}\n *\n * @template TConfig type of input config\n * @template TParsedConfig type of config after parsing\n * @template TUpdatableConfig type of config that can be updated\n * @template TEvents union of dispatched events\n */\nexport abstract class AbstractConfigurablePlugin<\n    TConfig extends Record<string, any>,\n    TParsedConfig extends TConfig = TConfig,\n    TUpdatableConfig extends TConfig = TConfig,\n    TEvents extends TypedEvent<AbstractPlugin> = never\n> extends AbstractPlugin<TEvents> {\n    static configParser: ConfigParser<any, any>;\n    static readonlyOptions: string[] = [];\n\n    readonly config: TParsedConfig;\n\n    constructor(viewer: Viewer, config: TConfig) {\n        super(viewer);\n\n        this.config = (this.constructor as typeof AbstractConfigurablePlugin).configParser(config) as TParsedConfig;\n    }\n\n    /**\n     * Update options\n     */\n    setOption<T extends keyof TUpdatableConfig>(option: T, value: TUpdatableConfig[T]) {\n        // @ts-ignore\n        this.setOptions({ [option]: value });\n    }\n\n    /**\n     * Update options\n     */\n    setOptions(options: Partial<TUpdatableConfig>) {\n        const rawConfig: TConfig = {\n            ...this.config,\n            ...options,\n        };\n\n        const ctor = this.constructor as typeof AbstractConfigurablePlugin;\n        const parser: ConfigParser<TConfig, TParsedConfig> = ctor.configParser as any;\n        const readonly = ctor.readonlyOptions;\n        const id = ctor.id;\n\n        for (let [key, value] of Object.entries(options) as [keyof TConfig, any][]) {\n            if (!(key in parser.defaults)) {\n                logWarn(`${id}: Unknown option \"${key as string}\"`);\n                continue;\n            }\n\n            if (readonly.includes(key as string)) {\n                logWarn(`${id}: Option \"${key as string}\" cannot be updated`);\n                continue;\n            }\n\n            if (key in parser.parsers) {\n                value = parser.parsers[key](value, {\n                    rawConfig: rawConfig,\n                    defValue: parser.defaults[key],\n                });\n            }\n\n            this.config[key] = value;\n        }\n    }\n}\n\nexport type PluginConstructor = new (viewer: Viewer, config?: any) => AbstractPlugin<any>;\n\n/**\n * Returns the plugin constructor from the imported object\n * @internal\n */\nexport function pluginInterop(plugin: any): PluginConstructor & typeof AbstractPlugin {\n    if (plugin) {\n        for (const [, p] of [['_', plugin], ...Object.entries(plugin)]) {\n            if (p.prototype instanceof AbstractPlugin) {\n                return p;\n            }\n        }\n    }\n    return null;\n}\n","import { Euler, MathUtils, Vector3 } from 'three';\nimport { SPHERE_RADIUS, VIEWER_DATA } from '../data/constants';\nimport {\n    ExtendedPosition,\n    PanoData,\n    PanoramaPosition,\n    Point,\n    Position,\n    SphereCorrection,\n    SphericalPosition,\n} from '../model';\nimport { PSVError } from '../PSVError';\nimport { applyEulerInverse, parseAngle, parseSpeed } from '../utils';\nimport type { Viewer } from '../Viewer';\nimport { AbstractService } from './AbstractService';\n\nconst vector3 = new Vector3();\nconst EULER_ZERO = new Euler(0, 0, 0, 'ZXY');\n\n/**\n * Collections of data converters for the viewer\n */\nexport class DataHelper extends AbstractService {\n    /**\n     * @internal\n     */\n    constructor(viewer: Viewer) {\n        super(viewer);\n    }\n\n    /**\n     * Converts vertical FOV to zoom level\n     */\n    fovToZoomLevel(fov: number): number {\n        const temp = Math.round(((fov - this.config.minFov) / (this.config.maxFov - this.config.minFov)) * 100);\n        return temp - 2 * (temp - 50);\n    }\n\n    /**\n     * Converts zoom level to vertical FOV\n     */\n    zoomLevelToFov(level: number): number {\n        return this.config.maxFov + (level / 100) * (this.config.minFov - this.config.maxFov);\n    }\n\n    /**\n     * Converts vertical FOV to horizontal FOV\n     */\n    vFovToHFov(vFov: number): number {\n        return MathUtils.radToDeg(2 * Math.atan(Math.tan(MathUtils.degToRad(vFov) / 2) * this.state.aspect));\n    }\n\n    /**\n     * Converts a speed into a duration from current position to a new position\n     */\n    speedToDuration(value: string | number, angle: number): number {\n        if (typeof value !== 'number') {\n            // desired radial speed\n            const speed = parseSpeed(value);\n            // compute duration\n            return (angle / Math.abs(speed)) * 1000;\n        } else {\n            return Math.abs(value);\n        }\n    }\n\n    /**\n     * Converts pixel texture coordinates to spherical radians coordinates\n     * @throws {@link PSVError} when the current adapter does not support texture coordinates\n     */\n    textureCoordsToSphericalCoords(point: PanoramaPosition): Position {\n        const panoData = this.state.panoData;\n        if (!panoData) {\n            throw new PSVError('Current adapter does not support texture coordinates.');\n        }\n\n        const relativeX = ((point.textureX + panoData.croppedX) / panoData.fullWidth) * Math.PI * 2;\n        const relativeY = ((point.textureY + panoData.croppedY) / panoData.fullHeight) * Math.PI;\n\n        const result: Position = {\n            yaw: relativeX >= Math.PI ? relativeX - Math.PI : relativeX + Math.PI,\n            pitch: Math.PI / 2 - relativeY,\n        };\n\n        // Apply panoData pose and sphereCorrection\n        if (\n            !EULER_ZERO.equals(this.viewer.renderer.panoramaPose) \n            || !EULER_ZERO.equals(this.viewer.renderer.sphereCorrection)\n        ) {\n            this.sphericalCoordsToVector3(result, vector3);\n            vector3.applyEuler(this.viewer.renderer.panoramaPose);\n            vector3.applyEuler(this.viewer.renderer.sphereCorrection);\n            return this.vector3ToSphericalCoords(vector3);\n        } else {\n            return result;\n        }\n    }\n\n    /**\n     * Converts spherical radians coordinates to pixel texture coordinates\n     * @throws {@link PSVError} when the current adapter does not support texture coordinates\n     */\n    sphericalCoordsToTextureCoords(position: Position): PanoramaPosition {\n        const panoData = this.state.panoData;\n        if (!panoData) {\n            throw new PSVError('Current adapter does not support texture coordinates.');\n        }\n\n        // Apply panoData pose and sphereCorrection\n        if (\n            !EULER_ZERO.equals(this.viewer.renderer.panoramaPose) \n            || !EULER_ZERO.equals(this.viewer.renderer.sphereCorrection)\n        ) {\n            this.sphericalCoordsToVector3(position, vector3);\n            applyEulerInverse(vector3, this.viewer.renderer.sphereCorrection);\n            applyEulerInverse(vector3, this.viewer.renderer.panoramaPose);\n            position = this.vector3ToSphericalCoords(vector3);\n        }\n\n        const relativeLong = (position.yaw / Math.PI / 2) * panoData.fullWidth;\n        const relativeLat = (position.pitch / Math.PI) * panoData.fullHeight;\n\n        return {\n            textureX:\n                Math.round(\n                    position.yaw < Math.PI\n                        ? relativeLong + panoData.fullWidth / 2\n                        : relativeLong - panoData.fullWidth / 2\n                ) - panoData.croppedX,\n            textureY: Math.round(panoData.fullHeight / 2 - relativeLat) - panoData.croppedY,\n        };\n    }\n\n    /**\n     * Converts spherical radians coordinates to a Vector3\n     */\n    sphericalCoordsToVector3(position: Position, vector?: Vector3): Vector3 {\n        if (!vector) {\n            vector = new Vector3();\n        }\n        vector.x = SPHERE_RADIUS * -Math.cos(position.pitch) * Math.sin(position.yaw);\n        vector.y = SPHERE_RADIUS * Math.sin(position.pitch);\n        vector.z = SPHERE_RADIUS * Math.cos(position.pitch) * Math.cos(position.yaw);\n        return vector;\n    }\n\n    /**\n     * Converts a Vector3 to spherical radians coordinates\n     */\n    vector3ToSphericalCoords(vector: Vector3): Position {\n        const phi = Math.acos(vector.y / Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z));\n        const theta = Math.atan2(vector.x, vector.z);\n\n        return {\n            yaw: theta < 0 ? -theta : Math.PI * 2 - theta,\n            pitch: Math.PI / 2 - phi,\n        };\n    }\n\n    /**\n     * Converts position on the viewer to a THREE.Vector3\n     */\n    viewerCoordsToVector3(viewerPoint: Point): Vector3 {\n        const sphereIntersect = this.viewer.renderer\n            .getIntersections(viewerPoint)\n            .filter((i) => i.object.userData[VIEWER_DATA]);\n\n        if (sphereIntersect.length) {\n            return sphereIntersect[0].point;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Converts position on the viewer to spherical radians coordinates\n     */\n    viewerCoordsToSphericalCoords(viewerPoint: Point): Position {\n        const vector = this.viewerCoordsToVector3(viewerPoint);\n        return vector ? this.vector3ToSphericalCoords(vector) : null;\n    }\n\n    /**\n     * Converts a Vector3 to position on the viewer\n     */\n    vector3ToViewerCoords(vector: Vector3): Point {\n        const vectorClone = vector.clone();\n        vectorClone.project(this.viewer.renderer.camera);\n\n        return {\n            x: Math.round(((vectorClone.x + 1) / 2) * this.state.size.width),\n            y: Math.round(((1 - vectorClone.y) / 2) * this.state.size.height),\n        };\n    }\n\n    /**\n     * Converts spherical radians coordinates to position on the viewer\n     */\n    sphericalCoordsToViewerCoords(position: Position): Point {\n        this.sphericalCoordsToVector3(position, vector3);\n        return this.vector3ToViewerCoords(vector3);\n    }\n\n    /**\n     * Converts pixel position to angles if present and ensure boundaries\n     */\n    cleanPosition(position: ExtendedPosition): Position {\n        if (\n            (position as PanoramaPosition).textureX !== undefined \n            && (position as PanoramaPosition).textureY !== undefined\n        ) {\n            return this.textureCoordsToSphericalCoords(position as PanoramaPosition);\n        }\n        return {\n            yaw: parseAngle((position as SphericalPosition).yaw),\n            pitch: parseAngle((position as SphericalPosition).pitch, !this.state.littlePlanet),\n        };\n    }\n\n    /**\n     * Ensure a SphereCorrection object is valid\n     */\n    cleanSphereCorrection(sphereCorrection: SphereCorrection): SphereCorrection {\n        return {\n            pan: parseAngle(sphereCorrection?.pan || 0),\n            tilt: parseAngle(sphereCorrection?.tilt || 0, true),\n            roll: parseAngle(sphereCorrection?.roll || 0, true, false),\n        };\n    }\n\n    /**\n     * Parse the pose angles of the pano data\n     */\n    cleanPanoramaPose(panoData: PanoData): SphereCorrection {\n        return {\n            pan: MathUtils.degToRad(panoData?.poseHeading || 0),\n            tilt: MathUtils.degToRad(panoData?.posePitch || 0),\n            roll: MathUtils.degToRad(panoData?.poseRoll || 0),\n        };\n    }\n}\n","import { ParsedViewerConfig } from '../model';\nimport type { Viewer } from '../Viewer';\nimport { ViewerState } from './ViewerState';\n\n/**\n * Base class for services\n */\nexport abstract class AbstractService {\n    protected readonly config: ParsedViewerConfig;\n    protected readonly state: ViewerState;\n\n    /**\n     * @internal\n     */\n    constructor(protected readonly viewer: Viewer) {\n        this.config = viewer.config;\n        this.state = viewer.state;\n    }\n\n    /**\n     * Destroys the service\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    destroy() {}\n}\n","import { MathUtils, Mesh, SplineCurve, Vector2 } from 'three';\nimport {\n    ACTIONS,\n    CTRLZOOM_TIMEOUT,\n    DBLCLICK_DELAY,\n    IDS,\n    INERTIA_WINDOW,\n    KEY_CODES,\n    LONGTOUCH_DELAY,\n    MOVE_THRESHOLD,\n    TWOFINGERSOVERLAY_DELAY,\n    VIEWER_DATA,\n} from '../data/constants';\nimport { SYSTEM } from '../data/system';\nimport {\n    ClickEvent,\n    DoubleClickEvent,\n    FullscreenEvent,\n    KeypressEvent,\n    ObjectEnterEvent,\n    ObjectHoverEvent,\n    ObjectLeaveEvent,\n    ViewerEvents,\n} from '../events';\nimport gestureIcon from '../icons/gesture.svg';\nimport mousewheelIcon from '../icons/mousewheel.svg';\nimport { ClickData, Point, Position } from '../model';\nimport {\n    Animation,\n    clone,\n    distance,\n    getClosest,\n    getPosition,\n    getTouchData,\n    hasParent,\n    isEmpty,\n    throttle,\n} from '../utils';\nimport { PressHandler } from '../utils/PressHandler';\nimport type { Viewer } from '../Viewer';\nimport { AbstractService } from './AbstractService';\n\nconst enum Step {\n    IDLE,\n    CLICK,\n    MOVING,\n    INERTIA,\n}\n\n/**\n * Events handler\n * @internal\n */\nexport class EventsHandler extends AbstractService {\n    private readonly data = {\n        step: Step.IDLE,\n        /** start x position of the click/touch */\n        startMouseX: 0,\n        /** start y position of the click/touch */\n        startMouseY: 0,\n        /** current x position of the cursor */\n        mouseX: 0,\n        /** current y position of the cursor */\n        mouseY: 0,\n        /** list of latest positions of the cursor, [time, x, y] */\n        mouseHistory: [] as [number, number, number][],\n        /** distance between fingers when zooming */\n        pinchDist: 0,\n        /** when the Ctrl key is pressed */\n        ctrlKeyDown: false,\n        /** temporary storage of click data between two clicks */\n        dblclickData: null as ClickData,\n        dblclickTimeout: null as ReturnType<typeof setTimeout>,\n        longtouchTimeout: null as ReturnType<typeof setTimeout>,\n        twofingersTimeout: null as ReturnType<typeof setTimeout>,\n        ctrlZoomTimeout: null as ReturnType<typeof setTimeout>,\n    };\n\n    private readonly keyHandler = new PressHandler();\n    private readonly resizeObserver = new ResizeObserver(throttle(() => this.viewer.autoSize(), 50));\n    private readonly moveThreshold = MOVE_THRESHOLD * SYSTEM.pixelRatio;\n\n    constructor(viewer: Viewer) {\n        super(viewer);\n    }\n\n    /**\n     * @internal\n     */\n    init() {\n        window.addEventListener('keydown', this, { passive: false });\n        window.addEventListener('keyup', this);\n        this.viewer.container.addEventListener('mousedown', this);\n        window.addEventListener('mousemove', this, { passive: false });\n        window.addEventListener('mouseup', this);\n        this.viewer.container.addEventListener('touchstart', this, { passive: false });\n        window.addEventListener('touchmove', this, { passive: false });\n        window.addEventListener('touchend', this, { passive: false });\n        this.viewer.container.addEventListener('wheel', this, { passive: false });\n        document.addEventListener(SYSTEM.fullscreenEvent, this);\n        this.resizeObserver.observe(this.viewer.container);\n    }\n\n    override destroy() {\n        window.removeEventListener('keydown', this);\n        window.removeEventListener('keyup', this);\n        this.viewer.container.removeEventListener('mousedown', this);\n        window.removeEventListener('mousemove', this);\n        window.removeEventListener('mouseup', this);\n        this.viewer.container.removeEventListener('touchstart', this);\n        window.removeEventListener('touchmove', this);\n        window.removeEventListener('touchend', this);\n        this.viewer.container.removeEventListener('wheel', this);\n        document.removeEventListener(SYSTEM.fullscreenEvent, this);\n        this.resizeObserver.disconnect();\n\n        clearTimeout(this.data.dblclickTimeout);\n        clearTimeout(this.data.longtouchTimeout);\n        clearTimeout(this.data.twofingersTimeout);\n        clearTimeout(this.data.ctrlZoomTimeout);\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(evt: Event) {\n        // prettier-ignore\n        switch (evt.type) {\n            case 'keydown': this.__onKeyDown(evt as KeyboardEvent); break;\n            case 'keyup': this.__onKeyUp(); break;\n            case 'mousemove': this.__onMouseMove(evt as MouseEvent); break;\n            case 'mouseup': this.__onMouseUp(evt as MouseEvent); break;\n            case 'touchmove': this.__onTouchMove(evt as TouchEvent); break;\n            case 'touchend': this.__onTouchEnd(evt as TouchEvent); break;\n            case SYSTEM.fullscreenEvent: this.__onFullscreenChange(); break;\n        }\n\n        if (!getClosest(evt.target as HTMLElement, '.psv--capture-event')) {\n            // prettier-ignore\n            switch (evt.type) {\n                case 'mousedown': this.__onMouseDown(evt as MouseEvent); break;\n                case 'touchstart': this.__onTouchStart(evt as TouchEvent); break;\n                case 'wheel': this.__onMouseWheel(evt as WheelEvent); break;\n            }\n        }\n    }\n\n    private __isStep(...step: Step[]): boolean {\n        return step.indexOf(this.data.step) !== -1;\n    }\n\n    /**\n     * Handles keyboard events\n     */\n    private __onKeyDown(e: KeyboardEvent) {\n        if (this.config.mousewheelCtrlKey) {\n            this.data.ctrlKeyDown = e.key === KEY_CODES.Control;\n\n            if (this.data.ctrlKeyDown) {\n                clearTimeout(this.data.ctrlZoomTimeout);\n                this.viewer.overlay.hide(IDS.CTRL_ZOOM);\n            }\n        }\n\n        if (!this.viewer.dispatchEvent(new KeypressEvent(e.key))) {\n            return;\n        }\n\n        if (!this.state.keyboardEnabled || !this.config.keyboard) {\n            return;\n        }\n\n        const action = this.config.keyboardActions[e.key];\n\n        if (typeof action === 'function') {\n            action(this.viewer);\n            e.preventDefault();\n        } else if (action && !this.keyHandler.pending) {\n            if (action !== ACTIONS.ZOOM_IN && action !== ACTIONS.ZOOM_OUT) {\n                this.viewer.stopAll();\n            }\n\n            // prettier-ignore\n            switch (action) {\n                case ACTIONS.ROTATE_UP: this.viewer.dynamics.position.roll({ pitch: false }); break;\n                case ACTIONS.ROTATE_DOWN: this.viewer.dynamics.position.roll({ pitch: true }); break;\n                case ACTIONS.ROTATE_RIGHT: this.viewer.dynamics.position.roll({ yaw: false }); break;\n                case ACTIONS.ROTATE_LEFT: this.viewer.dynamics.position.roll({ yaw: true }); break;\n                case ACTIONS.ZOOM_IN: this.viewer.dynamics.zoom.roll(false); break;\n                case ACTIONS.ZOOM_OUT: this.viewer.dynamics.zoom.roll(true); break;\n            }\n\n            this.keyHandler.down();\n            e.preventDefault();\n        }\n    }\n\n    /**\n     * Handles keyboard events\n     */\n    private __onKeyUp() {\n        this.data.ctrlKeyDown = false;\n\n        if (!this.state.keyboardEnabled) {\n            return;\n        }\n\n        this.keyHandler.up(() => {\n            this.viewer.dynamics.position.stop();\n            this.viewer.dynamics.zoom.stop();\n            this.viewer.resetIdleTimer();\n        });\n    }\n\n    /**\n     * Handles mouse down events\n     */\n    private __onMouseDown(evt: MouseEvent) {\n        this.data.step = Step.CLICK;\n        this.data.startMouseX = evt.clientX;\n        this.data.startMouseY = evt.clientY;\n    }\n\n    /**\n     *Handles mouse up events\n     */\n    private __onMouseUp(evt: MouseEvent) {\n        if (this.__isStep(Step.CLICK, Step.MOVING)) {\n            this.__stopMove(evt.clientX, evt.clientY, evt.target, evt.button === 2);\n        }\n    }\n\n    /**\n     * Handles mouse move events\n     */\n    private __onMouseMove(evt: MouseEvent) {\n        if (this.config.mousemove && this.__isStep(Step.CLICK, Step.MOVING)) {\n            evt.preventDefault();\n            this.__doMove(evt.clientX, evt.clientY);\n        }\n\n        this.__handleObjectsEvents(evt);\n    }\n\n    /**\n     * Handles touch events\n     */\n    private __onTouchStart(evt: TouchEvent) {\n        if (evt.touches.length === 1) {\n            this.data.step = Step.CLICK;\n            this.data.startMouseX = evt.touches[0].clientX;\n            this.data.startMouseY = evt.touches[0].clientY;\n\n            if (!this.data.longtouchTimeout) {\n                this.data.longtouchTimeout = setTimeout(() => {\n                    const touch = evt.touches[0];\n                    this.__stopMove(touch.clientX, touch.clientY, touch.target, true);\n                    this.data.longtouchTimeout = null;\n                }, LONGTOUCH_DELAY);\n            }\n        } else if (evt.touches.length === 2) {\n            this.data.step = Step.IDLE;\n            this.__cancelLongTouch();\n\n            if (this.config.mousemove) {\n                this.__cancelTwoFingersOverlay();\n                this.__startMoveZoom(evt);\n                evt.preventDefault();\n            }\n        }\n    }\n\n    /**\n     * Handles touch events\n     */\n    private __onTouchEnd(evt: TouchEvent) {\n        this.__cancelLongTouch();\n\n        if (this.__isStep(Step.CLICK, Step.MOVING)) {\n            evt.preventDefault();\n            this.__cancelTwoFingersOverlay();\n\n            if (evt.touches.length === 1) {\n                this.__stopMove(this.data.mouseX, this.data.mouseY);\n            } else if (evt.touches.length === 0) {\n                const touch = evt.changedTouches[0];\n                this.__stopMove(touch.clientX, touch.clientY, touch.target);\n            }\n        }\n    }\n\n    /**\n     * Handles touch move events\n     */\n    private __onTouchMove(evt: TouchEvent) {\n        this.__cancelLongTouch();\n\n        if (!this.config.mousemove) {\n            return;\n        }\n\n        if (evt.touches.length === 1) {\n            if (this.config.touchmoveTwoFingers) {\n                if (this.__isStep(Step.CLICK) && !this.data.twofingersTimeout) {\n                    this.data.twofingersTimeout = setTimeout(() => {\n                        this.viewer.overlay.show({\n                            id: IDS.TWO_FINGERS,\n                            image: gestureIcon,\n                            title: this.config.lang.twoFingers,\n                        });\n                    }, TWOFINGERSOVERLAY_DELAY);\n                }\n            } else if (this.__isStep(Step.CLICK, Step.MOVING)) {\n                evt.preventDefault();\n                const touch = evt.touches[0];\n                this.__doMove(touch.clientX, touch.clientY);\n            }\n        } else {\n            this.__doMoveZoom(evt);\n            this.__cancelTwoFingersOverlay();\n        }\n    }\n\n    /**\n     * Cancel the long touch timer if any\n     */\n    private __cancelLongTouch() {\n        if (this.data.longtouchTimeout) {\n            clearTimeout(this.data.longtouchTimeout);\n            this.data.longtouchTimeout = null;\n        }\n    }\n\n    /**\n     * Cancel the two fingers overlay timer if any\n     */\n    private __cancelTwoFingersOverlay() {\n        if (this.config.touchmoveTwoFingers) {\n            if (this.data.twofingersTimeout) {\n                clearTimeout(this.data.twofingersTimeout);\n                this.data.twofingersTimeout = null;\n            }\n            this.viewer.overlay.hide(IDS.TWO_FINGERS);\n        }\n    }\n\n    /**\n     * Handles mouse wheel events\n     */\n    private __onMouseWheel(evt: WheelEvent) {\n        if (!this.config.mousewheel) {\n            return;\n        }\n\n        if (this.config.mousewheelCtrlKey && !this.data.ctrlKeyDown) {\n            this.viewer.overlay.show({\n                id: IDS.CTRL_ZOOM,\n                image: mousewheelIcon,\n                title: this.config.lang.ctrlZoom,\n            });\n\n            clearTimeout(this.data.ctrlZoomTimeout);\n            this.data.ctrlZoomTimeout = setTimeout(() => this.viewer.overlay.hide(IDS.CTRL_ZOOM), CTRLZOOM_TIMEOUT);\n\n            return;\n        }\n\n        evt.preventDefault();\n        evt.stopPropagation();\n\n        const delta = (evt.deltaY / Math.abs(evt.deltaY)) * 5 * this.config.zoomSpeed;\n        if (delta !== 0) {\n            this.viewer.dynamics.zoom.step(-delta, 5);\n        }\n    }\n\n    /**\n     * Handles fullscreen events\n     */\n    private __onFullscreenChange() {\n        const fullscreen = this.viewer.isFullscreenEnabled();\n\n        if (this.config.keyboard === 'fullscreen') {\n            if (fullscreen) {\n                this.viewer.startKeyboardControl();\n            } else {\n                this.viewer.stopKeyboardControl();\n            }\n        }\n\n        this.viewer.dispatchEvent(new FullscreenEvent(fullscreen));\n    }\n\n    /**\n     * Resets all state variables\n     */\n    private __resetMove() {\n        this.data.step = Step.IDLE;\n        this.data.mouseX = 0;\n        this.data.mouseY = 0;\n        this.data.startMouseX = 0;\n        this.data.startMouseY = 0;\n        this.data.mouseHistory.length = 0;\n    }\n\n    /**\n     * Initializes the combines move and zoom\n     */\n    private __startMoveZoom(evt: TouchEvent) {\n        this.viewer.stopAll(); // TODO nom ?\n        this.__resetMove();\n\n        const touchData = getTouchData(evt);\n\n        this.data.step = Step.MOVING;\n        ({\n            distance: this.data.pinchDist,\n            center: { x: this.data.mouseX, y: this.data.mouseY },\n        } = touchData);\n\n        this.__logMouseMove(this.data.mouseX, this.data.mouseY);\n    }\n\n    /**\n     * Stops the movement\n     * @description If the move threshold was not reached a click event is triggered, otherwise an animation is launched to simulate inertia\n     */\n    private __stopMove(clientX: number, clientY: number, target?: EventTarget, rightclick = false) {\n        if (this.__isStep(Step.MOVING)) {\n            if (this.config.moveInertia) {\n                this.__logMouseMove(clientX, clientY);\n                this.__stopMoveInertia(clientX, clientY);\n            } else {\n                this.__resetMove();\n                this.viewer.resetIdleTimer();\n            }\n        } else if (this.__isStep(Step.CLICK)) {\n            this.viewer.stopAnimation();\n            this.__doClick(clientX, clientY, target, rightclick);\n            this.__resetMove();\n            this.viewer.resetIdleTimer();\n        }\n    }\n\n    /**\n     * Performs an animation to simulate inertia when the movement stops\n     */\n    private __stopMoveInertia(clientX: number, clientY: number) {\n        // get direction at end of movement\n        const curve = new SplineCurve(this.data.mouseHistory.map(([, x, y]) => new Vector2(x, y)));\n        const direction = curve.getTangent(1);\n\n        // average speed\n        // prettier-ignore\n        const speed = this.data.mouseHistory.reduce(({ total, prev }, curr) => ({\n            total: !prev ? 0 : total + distance({ x: prev[1], y: prev[2] }, { x: curr[1], y: curr[2] }) / (curr[0] - prev[0]),\n            prev: curr,\n        }), {\n            total: 0,\n            prev: null,\n        }).total / this.data.mouseHistory.length;\n\n        if (!speed) {\n            this.__resetMove();\n            this.viewer.resetIdleTimer();\n            return;\n        }\n\n        this.data.step = Step.INERTIA;\n\n        let currentClientX = clientX;\n        let currentClientY = clientY;\n\n        this.state.animation = new Animation({\n            properties: {\n                speed: { start: speed, end: 0 },\n            },\n            duration: 1000,\n            easing: 'outQuad',\n            onTick: (properties) => {\n                // 3 is a magic number\n                currentClientX += properties.speed * direction.x * 3 * SYSTEM.pixelRatio;\n                currentClientY += properties.speed * direction.y * 3 * SYSTEM.pixelRatio;\n                this.__applyMove(currentClientX, currentClientY);\n            },\n        });\n\n        this.state.animation.then((done) => {\n            this.state.animation = null;\n            if (done) {\n                this.__resetMove();\n                this.viewer.resetIdleTimer();\n            }\n        });\n    }\n\n    /**\n     * Triggers an event with all coordinates when a simple click is performed\n     */\n    private __doClick(clientX: number, clientY: number, target: EventTarget, rightclick = false) {\n        const boundingRect = this.viewer.container.getBoundingClientRect();\n\n        const viewerX = clientX - boundingRect.left;\n        const viewerY = clientY - boundingRect.top;\n\n        const intersections = this.viewer.renderer.getIntersections({ x: viewerX, y: viewerY });\n        const sphereIntersection = intersections.find((i) => i.object.userData[VIEWER_DATA]);\n\n        if (sphereIntersection) {\n            const sphericalCoords = this.viewer.dataHelper.vector3ToSphericalCoords(sphereIntersection.point);\n\n            const data: ClickData = {\n                rightclick: rightclick,\n                target: target as HTMLElement,\n                clientX,\n                clientY,\n                viewerX,\n                viewerY,\n                yaw: sphericalCoords.yaw,\n                pitch: sphericalCoords.pitch,\n                objects: intersections.map((i) => i.object).filter((o) => !o.userData[VIEWER_DATA]),\n            };\n\n            try {\n                const textureCoords = this.viewer.dataHelper.sphericalCoordsToTextureCoords(data);\n                data.textureX = textureCoords.textureX;\n                data.textureY = textureCoords.textureY;\n            } catch (e) {\n                data.textureX = NaN;\n                data.textureY = NaN;\n            }\n\n            if (!this.data.dblclickTimeout) {\n                this.viewer.dispatchEvent(new ClickEvent(data));\n\n                this.data.dblclickData = clone(data);\n                this.data.dblclickTimeout = setTimeout(() => {\n                    this.data.dblclickTimeout = null;\n                    this.data.dblclickData = null;\n                }, DBLCLICK_DELAY);\n            } else {\n                if (\n                    Math.abs(this.data.dblclickData.clientX - data.clientX) < this.moveThreshold\n                    && Math.abs(this.data.dblclickData.clientY - data.clientY) < this.moveThreshold\n                ) {\n                    this.viewer.dispatchEvent(new DoubleClickEvent(this.data.dblclickData));\n                }\n\n                clearTimeout(this.data.dblclickTimeout);\n                this.data.dblclickTimeout = null;\n                this.data.dblclickData = null;\n            }\n        }\n    }\n\n    /**\n     * Trigger events for observed THREE objects\n     */\n    private __handleObjectsEvents(evt: MouseEvent) {\n        if (!isEmpty(this.state.objectsObservers) && hasParent(evt.target as HTMLElement, this.viewer.container)) {\n            const viewerPos = getPosition(this.viewer.container);\n\n            const viewerPoint: Point = {\n                x: evt.clientX - viewerPos.x,\n                y: evt.clientY - viewerPos.y,\n            };\n\n            const intersections = this.viewer.renderer.getIntersections(viewerPoint);\n\n            const emit = (\n                object: Mesh,\n                key: string,\n                evtCtor: new (e: MouseEvent, o: Mesh, pt: Point, data: any) => ViewerEvents\n            ) => {\n                this.viewer.dispatchEvent(new evtCtor(evt, object, viewerPoint, key));\n            };\n\n            for (const [key, object] of Object.entries(this.state.objectsObservers) as [string, Mesh | null][]) {\n                const intersection = intersections.find((i) => i.object.userData[key]);\n\n                if (intersection) {\n                    if (object && intersection.object !== object) {\n                        emit(object, key, ObjectLeaveEvent);\n                        this.state.objectsObservers[key] = null;\n                    }\n\n                    if (!object) {\n                        this.state.objectsObservers[key] = intersection.object;\n                        emit(intersection.object, key, ObjectEnterEvent);\n                    } else {\n                        emit(intersection.object, key, ObjectHoverEvent);\n                    }\n                } else if (object) {\n                    emit(object, key, ObjectLeaveEvent);\n                    this.state.objectsObservers[key] = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * Starts moving when crossing moveThreshold and performs movement\n     */\n    private __doMove(clientX: number, clientY: number) {\n        if (\n            this.__isStep(Step.CLICK)\n            && (Math.abs(clientX - this.data.startMouseX) >= this.moveThreshold\n                || Math.abs(clientY - this.data.startMouseY) >= this.moveThreshold)\n        ) {\n            this.viewer.stopAll();\n            this.__resetMove();\n            this.data.step = Step.MOVING;\n            this.data.mouseX = clientX;\n            this.data.mouseY = clientY;\n            this.__logMouseMove(clientX, clientY);\n        } else if (this.__isStep(Step.MOVING)) {\n            this.__applyMove(clientX, clientY);\n            this.__logMouseMove(clientX, clientY);\n        }\n    }\n\n    /**\n     * Raw method for movement, called from mouse event and move inertia\n     */\n    private __applyMove(clientX: number, clientY: number) {\n        const rotation: Position = {\n            yaw:\n                this.config.moveSpeed\n                * ((clientX - this.data.mouseX) / this.state.size.width)\n                * MathUtils.degToRad(this.state.littlePlanet ? 90 : this.state.hFov),\n            pitch:\n                this.config.moveSpeed\n                * ((clientY - this.data.mouseY) / this.state.size.height)\n                * MathUtils.degToRad(this.state.littlePlanet ? 90 : this.state.vFov),\n        };\n\n        const currentPosition = this.viewer.getPosition();\n        this.viewer.rotate({\n            yaw: currentPosition.yaw - rotation.yaw,\n            pitch: currentPosition.pitch + rotation.pitch,\n        });\n\n        this.data.mouseX = clientX;\n        this.data.mouseY = clientY;\n    }\n\n    /**\n     * Perfoms combined move and zoom\n     */\n    private __doMoveZoom(evt: TouchEvent) {\n        if (this.__isStep(Step.MOVING)) {\n            evt.preventDefault();\n\n            const touchData = getTouchData(evt);\n            const delta = ((touchData.distance - this.data.pinchDist) / SYSTEM.pixelRatio) * this.config.zoomSpeed;\n\n            this.viewer.zoom(this.viewer.getZoomLevel() + delta);\n            this.__doMove(touchData.center.x, touchData.center.y);\n\n            this.data.pinchDist = touchData.distance;\n        }\n    }\n\n    /**\n     * Stores each mouse position during a mouse move\n     * @description Positions older than \"INERTIA_WINDOW\" are removed<br>\n     * Positions before a pause of \"INERTIA_WINDOW\" / 10 are removed\n     */\n    private __logMouseMove(clientX: number, clientY: number) {\n        const now = Date.now();\n\n        const last = this.data.mouseHistory.length\n            ? this.data.mouseHistory[this.data.mouseHistory.length - 1]\n            : [0, -1, -1];\n\n        // avoid duplicates\n        if (last[1] === clientX && last[2] === clientY) {\n            last[0] = now;\n        } else if (now === last[0]) {\n            last[1] = clientX;\n            last[2] = clientY;\n        } else {\n            this.data.mouseHistory.push([now, clientX, clientY]);\n        }\n\n        let previous = null;\n\n        for (let i = 0; i < this.data.mouseHistory.length; ) {\n            if (this.data.mouseHistory[i][0] < now - INERTIA_WINDOW) {\n                this.data.mouseHistory.splice(i, 1);\n            } else if (previous && this.data.mouseHistory[i][0] - previous > INERTIA_WINDOW / 10) {\n                this.data.mouseHistory.splice(0, i);\n                i = 0;\n                previous = this.data.mouseHistory[i][0];\n            } else {\n                previous = this.data.mouseHistory[i][0];\n                i++;\n            }\n        }\n    }\n}\n","import {\n    Euler,\n    Group,\n    Intersection,\n    Mesh,\n    Object3D,\n    PerspectiveCamera,\n    Raycaster,\n    Renderer as ThreeRenderer,\n    Scene,\n    Vector2,\n    Vector3,\n    WebGLRenderer,\n    WebGLRenderTarget,\n} from 'three';\nimport { SPHERE_RADIUS, VIEWER_DATA } from '../data/constants';\nimport { SYSTEM } from '../data/system';\nimport {\n    BeforeRenderEvent,\n    ConfigChangedEvent,\n    PositionUpdatedEvent,\n    RenderEvent,\n    SizeUpdatedEvent,\n    ZoomUpdatedEvent,\n} from '../events';\nimport { PanoData, PanoramaOptions, Point, SphereCorrection, TextureData } from '../model';\nimport { Animation, isExtendedPosition } from '../utils';\nimport type { Viewer } from '../Viewer';\nimport { AbstractService } from './AbstractService';\n\nconst vector2 = new Vector2();\n\n/**\n * Controller for the three.js scene\n */\nexport class Renderer extends AbstractService {\n    private readonly renderer: WebGLRenderer;\n    private readonly scene: Scene;\n    /** @internal */\n    public readonly camera: PerspectiveCamera;\n    private readonly mesh: Mesh;\n    private readonly meshContainer: Group;\n    private readonly raycaster: Raycaster;\n    private readonly container: HTMLElement;\n\n    private timestamp?: number;\n    private customRenderer?: Omit<ThreeRenderer, 'domElement'>;\n\n    get panoramaPose(): Euler {\n        return this.mesh.rotation;\n    }\n\n    get sphereCorrection(): Euler {\n        return this.meshContainer.rotation;\n    }\n\n    /**\n     * @internal\n     */\n    constructor(viewer: Viewer) {\n        super(viewer);\n\n        this.renderer = new WebGLRenderer({ alpha: true, antialias: true });\n        this.renderer.setPixelRatio(SYSTEM.pixelRatio);\n        this.renderer.domElement.className = 'psv-canvas';\n\n        this.scene = this.viewer.scene || new Scene();\n\n        this.camera = this.viewer.camera || new PerspectiveCamera(50, 16 / 9, 0.1, 2 * SPHERE_RADIUS);\n\n        this.mesh = this.viewer.adapter.createMesh();\n        this.mesh.userData = { [VIEWER_DATA]: true };\n\n        this.meshContainer = this.viewer.meshContainer || new Group();\n        this.meshContainer.add(this.mesh);\n        this.scene.add(this.meshContainer);\n\n        this.raycaster = new Raycaster();\n\n        this.container = document.createElement('div');\n        this.container.className = 'psv-canvas-container';\n        this.container.style.background = this.config.canvasBackground;\n        this.container.appendChild(this.renderer.domElement);\n        // this.viewer.container.appendChild(this.container);\n\n        this.viewer.addEventListener(SizeUpdatedEvent.type, this);\n        this.viewer.addEventListener(ZoomUpdatedEvent.type, this);\n        this.viewer.addEventListener(PositionUpdatedEvent.type, this);\n        this.viewer.addEventListener(ConfigChangedEvent.type, this);\n\n        this.hide();\n    }\n\n    /**\n     * @internal\n     */\n    init() {\n        if (this.config.mousemove) {\n            this.container.style.cursor = 'move';\n        }\n        this.show();\n        this.renderer.setAnimationLoop((t) => this.__renderLoop(t));\n    }\n\n    /**\n     * @internal\n     */\n    override destroy() {\n        // cancel render loop\n        this.renderer.setAnimationLoop(null);\n\n        // destroy ThreeJS view\n        this.cleanScene(this.scene);\n\n        // remove container\n        this.viewer.container.removeChild(this.container);\n\n        this.viewer.removeEventListener(SizeUpdatedEvent.type, this);\n        this.viewer.removeEventListener(ZoomUpdatedEvent.type, this);\n        this.viewer.removeEventListener(PositionUpdatedEvent.type, this);\n        this.viewer.removeEventListener(ConfigChangedEvent.type, this);\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        // prettier-ignore\n        switch (e.type) {\n            case SizeUpdatedEvent.type: this.__onSizeUpdated(); break;\n            case ZoomUpdatedEvent.type: this.__onZoomUpdated(); break;\n            case PositionUpdatedEvent.type: this.__onPositionUpdated(); break;\n            case ConfigChangedEvent.type:\n                if ((e as ConfigChangedEvent).containsOptions('fisheye')) {\n                    this.__onPositionUpdated();\n                }\n                if ((e as ConfigChangedEvent).containsOptions('mousemove')) {\n                    this.container.style.cursor = this.config.mousemove ? 'move' : 'default';\n                }\n                if ((e as ConfigChangedEvent).containsOptions('canvasBackground')) {\n                    this.container.style.background = this.config.canvasBackground;\n                }\n                break;\n        }\n    }\n\n    /**\n     * Hides the viewer\n     */\n    hide() {\n        this.container.style.opacity = '0';\n    }\n\n    /**\n     * Shows the viewer\n     */\n    show() {\n        this.container.style.opacity = '1';\n    }\n\n    /**\n     * Resets or replaces the THREE renderer by a custom one\n     */\n    setCustomRenderer(factory: (renderer: WebGLRenderer) => Omit<ThreeRenderer, 'domElement'>) {\n        if (factory) {\n            this.customRenderer = factory(this.renderer);\n        } else {\n            this.customRenderer = null;\n        }\n        this.viewer.needsUpdate();\n    }\n\n    /**\n     * Updates the size of the renderer and the aspect of the camera\n     */\n    private __onSizeUpdated() {\n        this.renderer.setSize(this.state.size.width, this.state.size.height);\n        // this.camera.aspect = this.state.aspect;\n        // this.camera.updateProjectionMatrix();\n        this.viewer.needsUpdate();\n    }\n\n    /**\n     * Updates the fov of the camera\n     */\n    private __onZoomUpdated() {\n        // this.camera.fov = this.state.vFov;\n        // this.camera.updateProjectionMatrix();\n        this.viewer.needsUpdate();\n    }\n\n    /**\n     * Updates the position of the camera\n     */\n    private __onPositionUpdated() {\n        // this.camera.position.set(0, 0, 0);\n        // this.camera.lookAt(this.state.direction);\n        // if (this.config.fisheye) {\n        //     this.camera.position\n        //         .copy(this.state.direction)\n        //         .multiplyScalar(this.config.fisheye / 2)\n        //         .negate();\n        // }\n        this.viewer.needsUpdate();\n    }\n\n    /**\n     * Main event loop, performs a render if `state.needsUpdate` is true\n     */\n    private __renderLoop(timestamp: number) {\n        const elapsed = !this.timestamp ? 0 : timestamp - this.timestamp;\n        this.timestamp = timestamp;\n\n        this.viewer.dispatchEvent(new BeforeRenderEvent(timestamp, elapsed));\n        this.viewer.dynamics.update(elapsed);\n\n        if (this.state.needsUpdate) {\n            (this.customRenderer || this.renderer).render(this.scene, this.camera);\n            this.viewer.dispatchEvent(new RenderEvent());\n            this.state.needsUpdate = false;\n        }\n    }\n\n    /**\n     * Applies the texture to the scene, creates the scene if needed\n     * @internal\n     */\n    setTexture(textureData: TextureData) {\n        this.state.panoData = textureData.panoData;\n\n        this.viewer.adapter.setTexture(this.mesh, textureData);\n\n        this.viewer.needsUpdate();\n    }\n\n    /**\n     * Applies the overlay to the mesh\n     * @internal\n     */\n    setOverlay(textureData: TextureData, opacity: number) {\n        this.viewer.adapter.setOverlay(this.mesh, textureData, opacity);\n        this.viewer.needsUpdate();\n    }\n\n    /**\n     * Applies a panorama data pose to a Mesh\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setPanoramaPose(_panoData: PanoData, _mesh: Mesh = this.mesh) {\n        // By Google documentation the angles are applied on the camera in order : heading, pitch, roll\n        // here we apply the reverse transformation on the sphere\n        // const cleanCorrection = this.viewer.dataHelper.cleanPanoramaPose(panoData);\n\n        // mesh.rotation.set(-cleanCorrection.tilt, -cleanCorrection.pan, -cleanCorrection.roll, 'ZXY');\n    }\n\n    /**\n     * Applies a SphereCorrection to a Group\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setSphereCorrection(_sphereCorrection: SphereCorrection, _group: Object3D = this.meshContainer) {\n        // const cleanCorrection = this.viewer.dataHelper.cleanSphereCorrection(sphereCorrection);\n\n        // group.rotation.set(cleanCorrection.tilt, cleanCorrection.pan, cleanCorrection.roll, 'ZXY');\n    }\n\n    /**\n     * Performs transition between the current and a new texture\n     * @internal\n     */\n    transition(textureData: TextureData, options: PanoramaOptions): Animation<any> {\n        const positionProvided = isExtendedPosition(options);\n        const zoomProvided = 'zoom' in options;\n\n        // create temp group and new mesh, half size to be in \"front\" of the first one\n        const group = new Group();\n        const mesh = this.viewer.adapter.createMesh(0.5);\n        this.viewer.adapter.setTexture(mesh, textureData, true);\n        this.viewer.adapter.setTextureOpacity(mesh, 0);\n        this.setPanoramaPose(textureData.panoData, mesh);\n        this.setSphereCorrection(options.sphereCorrection, group);\n\n        // rotate the new sphere to make the target position face the camera\n        if (positionProvided) {\n            const cleanPosition = this.viewer.dataHelper.cleanPosition(options);\n            const currentPosition = this.viewer.getPosition();\n\n            // rotation along the vertical axis\n            const verticalAxis = new Vector3(0, 1, 0);\n            group.rotateOnWorldAxis(verticalAxis, cleanPosition.yaw - currentPosition.yaw);\n\n            // rotation along the camera horizontal axis\n            const horizontalAxis = new Vector3(0, 1, 0).cross(this.camera.getWorldDirection(new Vector3())).normalize();\n            group.rotateOnWorldAxis(horizontalAxis, cleanPosition.pitch - currentPosition.pitch);\n        }\n\n        group.add(mesh);\n        this.scene.add(group);\n\n        // make sure the new texture is transfered to the GPU before starting the animation\n        this.renderer.setRenderTarget(new WebGLRenderTarget());\n        this.renderer.render(this.scene, this.camera);\n        this.renderer.setRenderTarget(null);\n\n        const animation = new Animation({\n            properties: {\n                opacity: { start: 0.0, end: 1.0 },\n                zoom: zoomProvided ? { start: this.viewer.getZoomLevel(), end: options.zoom } : undefined,\n            },\n            duration: options.transition as number,\n            easing: 'outCubic',\n            onTick: (properties) => {\n                this.viewer.adapter.setTextureOpacity(mesh, properties.opacity);\n                this.viewer.adapter.setTextureOpacity(this.mesh, 1 - properties.opacity);\n\n                if (zoomProvided) {\n                    this.viewer.zoom(properties.zoom);\n                }\n\n                this.viewer.needsUpdate();\n            },\n        });\n\n        animation.then((completed) => {\n            if (completed) {\n                // remove temp sphere and transfer the texture to the main mesh\n                this.setTexture(textureData);\n                this.viewer.adapter.setTextureOpacity(this.mesh, 1);\n                this.setPanoramaPose(textureData.panoData);\n                this.setSphereCorrection(options.sphereCorrection);\n\n                // actually rotate the camera\n                if (positionProvided) {\n                    this.viewer.rotate(options);\n                }\n            } else {\n                this.viewer.adapter.disposeTexture(textureData);\n            }\n\n            this.scene.remove(group);\n            mesh.geometry.dispose();\n            mesh.geometry = null;\n        });\n\n        return animation;\n    }\n\n    /**\n     * Returns intersections with objects in the scene\n     */\n    getIntersections(viewerPoint: Point): Intersection<Mesh>[] {\n        vector2.x = (2 * viewerPoint.x) / this.state.size.width - 1;\n        vector2.y = (-2 * viewerPoint.y) / this.state.size.height + 1;\n\n        this.raycaster.setFromCamera(vector2, this.camera);\n\n        return this.raycaster\n            .intersectObjects(this.scene.children, true)\n            .filter((i) => (i.object as Mesh).isMesh && !!i.object.userData) as Intersection<Mesh>[];\n    }\n\n    /**\n     * Adds an object to the THREE scene\n     */\n    addObject(object: Object3D) {\n        this.scene.add(object);\n    }\n\n    /**\n     * Removes an object from the THREE scene\n     */\n    removeObject(object: Object3D) {\n        this.scene.remove(object);\n    }\n\n    /**\n     * Calls `dispose` on all objects and textures\n     * @internal\n     */\n    cleanScene(object: any) {\n        object.traverse((item: any) => {\n            if (item.geometry) {\n                item.geometry.dispose();\n            }\n\n            if (item.material) {\n                if (Array.isArray(item.material)) {\n                    item.material.forEach((material: any) => {\n                        if (material.map) {\n                            material.map.dispose();\n                        }\n\n                        material.dispose();\n                    });\n                } else {\n                    if (item.material.map) {\n                        item.material.map.dispose();\n                    }\n\n                    item.material.dispose();\n                }\n            }\n\n            if (item.dispose && !(item instanceof Scene)) {\n                item.dispose();\n            }\n\n            if (item !== object) {\n                this.cleanScene(item);\n            }\n        });\n    }\n}\n","import { FileLoader } from 'three';\nimport { PSVError } from '../PSVError';\nimport type { Viewer } from '../Viewer';\nimport { AbstractService } from './AbstractService';\n\n/**\n * Image and texture loading system\n */\nexport class TextureLoader extends AbstractService {\n    private readonly loader: FileLoader;\n\n    /**\n     * @internal\n     */\n    constructor(viewer: Viewer) {\n        super(viewer);\n\n        this.loader = new FileLoader();\n        this.loader.setResponseType('blob');\n        if (this.config.withCredentials) {\n            this.loader.setWithCredentials(true);\n        }\n    }\n\n    /**\n     * @internal\n     */\n    override destroy() {\n        this.abortLoading();\n        super.destroy();\n    }\n\n    /**\n     * Cancels current HTTP requests\n     * @internal\n     */\n    abortLoading() {\n        // noop implementation waiting for https://github.com/mrdoob/three.js/pull/23070\n    }\n\n    /**\n     * Loads a Blob with FileLoader\n     */\n    loadFile(url: string, onProgress?: (p: number) => void): Promise<Blob> {\n        if (this.config.requestHeaders) {\n            this.loader.setRequestHeader(this.config.requestHeaders(url));\n        }\n\n        return new Promise((resolve, reject) => {\n            let progress = 0;\n            onProgress?.(progress);\n\n            this.loader.load(\n                url,\n                (result) => {\n                    progress = 100;\n                    onProgress?.(progress);\n                    resolve(result as any as Blob);\n                },\n                (e) => {\n                    if (e.lengthComputable) {\n                        const newProgress = (e.loaded / e.total) * 100;\n                        if (newProgress > progress) {\n                            progress = newProgress;\n                            onProgress?.(progress);\n                        }\n                    }\n                },\n                (err) => {\n                    reject(err);\n                }\n            );\n        });\n    }\n\n    /**\n     * Loads an Image using FileLoader to have progress events\n     */\n    loadImage(url: string, onProgress?: (p: number) => void): Promise<HTMLImageElement> {\n        return this.loadFile(url, onProgress).then(\n            (result) =>\n                new Promise((resolve, reject) => {\n                    const img = document.createElement('img');\n                    img.onload = () => {\n                        URL.revokeObjectURL(img.src);\n                        resolve(img);\n                    };\n                    img.onerror = reject;\n                    img.src = URL.createObjectURL(result);\n                })\n        );\n    }\n\n    /**\n     * Preload a panorama file without displaying it\n     */\n    preloadPanorama(panorama: any): Promise<unknown> {\n        if (this.viewer.adapter.supportsPreload(panorama)) {\n            return this.viewer.adapter.loadTexture(panorama);\n        } else {\n            return Promise.reject(new PSVError('Current adapter does not support preload'));\n        }\n    }\n}\n","import { MathUtils } from 'three';\nimport { Dynamic, MultiDynamic } from '../utils';\nimport type { Viewer } from '../Viewer';\nimport { PositionUpdatedEvent, ZoomUpdatedEvent } from '../events';\nimport { AbstractService } from './AbstractService';\n\nexport class ViewerDynamics extends AbstractService {\n    readonly zoom = new Dynamic(\n        (zoomLevel) => {\n            this.viewer.state.vFov = this.viewer.dataHelper.zoomLevelToFov(zoomLevel);\n            this.viewer.state.hFov = this.viewer.dataHelper.vFovToHFov(this.viewer.state.vFov);\n            this.viewer.dispatchEvent(new ZoomUpdatedEvent(zoomLevel));\n        },\n        {\n            defaultValue: this.viewer.config.defaultZoomLvl,\n            min: 0,\n            max: 100,\n            wrap: false,\n        }\n    );\n\n    readonly position = new MultiDynamic(\n        (position) => {\n            this.viewer.dataHelper.sphericalCoordsToVector3(position, this.viewer.state.direction);\n            this.viewer.dispatchEvent(new PositionUpdatedEvent(position));\n        },\n        {\n            yaw: new Dynamic(null, {\n                defaultValue: this.config.defaultYaw,\n                min: 0,\n                max: 2 * Math.PI,\n                wrap: true,\n            }),\n            pitch: new Dynamic(null, {\n                defaultValue: this.config.defaultPitch,\n                min: !this.viewer.state.littlePlanet ? -Math.PI / 2 : 0,\n                max: !this.viewer.state.littlePlanet ? Math.PI / 2 : Math.PI * 2,\n                wrap: this.viewer.state.littlePlanet,\n            }),\n        }\n    );\n\n    /**\n     * @internal\n     */\n    constructor(viewer: Viewer) {\n        super(viewer);\n        this.updateSpeeds();\n    }\n\n    /**\n     * @internal\n     */\n    updateSpeeds() {\n        this.zoom.setSpeed(this.config.zoomSpeed * 50);\n        this.position.setSpeed(MathUtils.degToRad(this.config.moveSpeed * 50));\n    }\n\n    /**\n     * @internal\n     */\n    update(elapsed: number) {\n        this.zoom.update(elapsed);\n        this.position.update(elapsed);\n    }\n}\n","import { Mesh, Vector3 } from 'three';\nimport { SPHERE_RADIUS } from '../data/constants';\nimport { PanoData, Size } from '../model';\nimport type { Animation } from '../utils';\n\n/**\n * Internal properties of the viewer\n */\nexport class ViewerState {\n    /**\n     * when all components are loaded\n     */\n    ready = false;\n\n    /**\n     * if the view needs to be renderer\n     */\n    needsUpdate = false;\n\n    /**\n     * if the keyboard events are currently listened to\n     */\n    keyboardEnabled = false;\n\n    /**\n     * direction of the camera\n     */\n    direction = new Vector3(0, 0, SPHERE_RADIUS);\n\n    /**\n     * vertical FOV\n     */\n    vFov = 60;\n\n    /**\n     * horizontal FOV\n     */\n    hFov = 60;\n\n    /**\n     * renderer aspect ratio\n     */\n    aspect = 1;\n\n    /**\n     * currently running animation\n     */\n    animation: Animation = null;\n\n    /**\n     * currently running transition\n     */\n    transitionAnimation: Animation = null;\n\n    /**\n     * promise of the last \"setPanorama()\" call\n     */\n    loadingPromise: Promise<any> = null;\n\n    /**\n     * special tweaks for LittlePlanetAdapter\n     */\n    littlePlanet = false;\n\n    /**\n     * time of the last user action\n     */\n    idleTime = -1;\n\n    /**\n     * registered THREE objects observer\n     */\n    objectsObservers: Record<string, Mesh | null> = {};\n\n    /**\n     * size of the container\n     */\n    size: Size = {\n        width: 0,\n        height: 0,\n    };\n\n    /**\n     *  panorama metadata, if supported\n     */\n    panoData: PanoData = {\n        fullWidth: 0,\n        fullHeight: 0,\n        croppedWidth: 0,\n        croppedHeight: 0,\n        croppedX: 0,\n        croppedY: 0,\n        poseHeading: 0,\n        posePitch: 0,\n        poseRoll: 0,\n    };\n\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line  @typescript-eslint/no-empty-function\n    constructor() {}\n}\n","import type { AbstractAdapter } from './adapters/AbstractAdapter';\nimport { CONFIG_PARSERS, DEFAULTS, getViewerConfig, READONLY_OPTIONS } from './data/config';\nimport { ANIMATION_MIN_DURATION, DEFAULT_TRANSITION, VIEWER_DATA } from './data/constants';\nimport { SYSTEM } from './data/system';\nimport {\n    BeforeAnimateEvent,\n    BeforeRotateEvent,\n    ConfigChangedEvent,\n    PanoramaLoadedEvent,\n    ReadyEvent,\n    SizeUpdatedEvent,\n    StopAllEvent,\n    ViewerEvents,\n    ZoomUpdatedEvent,\n} from './events';\nimport { TypedEventTarget } from './lib/TypedEventTarget';\nimport {\n    AnimateOptions,\n    CssSize,\n    ExtendedPosition,\n    PanoramaOptions,\n    ParsedViewerConfig,\n    Position,\n    Size,\n    UpdatableViewerConfig,\n    ViewerConfig,\n} from './model';\nimport type { AbstractPlugin, PluginConstructor } from './plugins/AbstractPlugin';\nimport { pluginInterop } from './plugins/AbstractPlugin';\nimport { PSVError } from './PSVError';\nimport { DataHelper } from './services/DataHelper';\nimport { EventsHandler } from './services/EventsHandler';\nimport { Renderer } from './services/Renderer';\nimport { TextureLoader } from './services/TextureLoader';\nimport { ViewerDynamics } from './services/ViewerDynamics';\nimport { ViewerState } from './services/ViewerState';\nimport {\n    Animation,\n    exitFullscreen,\n    getAbortError,\n    getAngle,\n    getElement,\n    getShortestArc,\n    isAbortError,\n    isExtendedPosition,\n    isFullscreenEnabled,\n    logWarn,\n    requestFullscreen,\n    resolveBoolean,\n    toggleClass,\n} from './utils';\nimport { Group, MathUtils, PerspectiveCamera, Scene } from 'three';\n\n/**\n * Photo Sphere Viewer controller\n */\nexport class Viewer extends TypedEventTarget<ViewerEvents> {\n    readonly state: ViewerState;\n    readonly config: ParsedViewerConfig;\n\n    readonly parent: HTMLElement;\n    readonly container: HTMLElement;\n    readonly camera: PerspectiveCamera;\n    readonly meshContainer: Group;\n    readonly scene: Scene;\n\n    /** @internal */\n    readonly adapter: AbstractAdapter<any, any>;\n    /** @internal */\n    readonly plugins: Record<string, AbstractPlugin<any>> = {};\n    /** @internal */\n    readonly dynamics: ViewerDynamics;\n\n    readonly renderer: Renderer;\n    readonly textureLoader: TextureLoader;\n    /** @internal */\n    readonly eventsHandler: EventsHandler;\n    readonly dataHelper: DataHelper;\n\n    constructor(config: ViewerConfig) {\n        super();\n\n        SYSTEM.load();\n\n        this.state = new ViewerState();\n        this.config = getViewerConfig(config);\n\n        this.parent = getElement(config.container);\n        // @ts-ignore\n        this.parent[VIEWER_DATA] = this;\n\n        this.container = this.parent;\n        // this.container.classList.add('psv-container');\n        // this.parent.appendChild(this.container);\n        this.camera = config.camera;\n        this.meshContainer = config.meshContainer;\n        this.scene = config.scene;\n\n        // @ts-ignore\n        this.adapter = new this.config.adapter[0](this, this.config.adapter[1]);\n\n        this.renderer = new Renderer(this);\n        this.textureLoader = new TextureLoader(this);\n        this.eventsHandler = new EventsHandler(this);\n        this.dataHelper = new DataHelper(this);\n        this.dynamics = new ViewerDynamics(this);\n\n        // init\n        this.resize(this.config.size);\n\n        resolveBoolean(SYSTEM.isTouchEnabled, (enabled) => {\n            toggleClass(this.container, 'psv--is-touch', enabled);\n        });\n\n        // init plugins\n        this.config.plugins.forEach(([plugin, opts]) => {\n            // @ts-ignore\n            this.plugins[plugin.id] = new plugin(this, opts);\n        });\n        for (const plugin of Object.values(this.plugins)) {\n            plugin.init?.();\n        }\n\n        // load panorama\n        if (this.config.panorama) {\n            this.setPanorama(this.config.panorama);\n        } else {\n            // this.loader.show();\n        }\n    }\n\n    /**\n     * Destroys the viewer\n     */\n    destroy() {\n        this.stopAll();\n        this.stopKeyboardControl();\n        this.exitFullscreen();\n\n        for (const [id, plugin] of Object.entries(this.plugins)) {\n            plugin.destroy();\n            delete this.plugins[id];\n        }\n\n        this.eventsHandler.destroy();\n        this.renderer.destroy();\n        this.textureLoader.destroy();\n        this.dataHelper.destroy();\n        this.adapter.destroy();\n        this.dynamics.destroy();\n\n        this.parent.removeChild(this.container);\n        // @ts-ignore\n        delete this.parent[VIEWER_DATA];\n    }\n\n    private init() {\n        this.eventsHandler.init();\n        this.renderer.init();\n\n        if (this.config.keyboard === 'always') {\n            this.startKeyboardControl();\n        }\n\n        this.resetIdleTimer();\n\n        this.state.ready = true;\n\n        this.dispatchEvent(new ReadyEvent());\n    }\n\n    /**\n     * Restarts the idle timer\n     * @internal\n     */\n    resetIdleTimer() {\n        this.state.idleTime = performance.now();\n    }\n\n    /**\n     * Stops the idle timer\n     * @internal\n     */\n    disableIdleTimer() {\n        this.state.idleTime = -1;\n    }\n\n    /**\n     * Returns the instance of a plugin if it exists\n     * @example By plugin identifier\n     * ```js\n     * viewer.getPlugin('markers')\n     * ```\n     * @example By plugin class with TypeScript support\n     * ```ts\n     * viewer.getPlugin<MarkersPlugin>(MarkersPlugin)\n     * ```\n     */\n    getPlugin<T extends AbstractPlugin<any>>(pluginId: string | PluginConstructor): T {\n        if (typeof pluginId === 'string') {\n            return this.plugins[pluginId] as T;\n        } else {\n            const pluginCtor = pluginInterop(pluginId);\n            return pluginCtor ? (this.plugins[pluginCtor.id] as T) : null;\n        }\n    }\n\n    /**\n     * Returns the current position of the camera\n     */\n    getPosition(): Position {\n        return this.dataHelper.cleanPosition(this.dynamics.position.current);\n    }\n\n    /**\n     * Returns the current zoom level\n     */\n    getZoomLevel(): number {\n        return MathUtils.clamp(this.config.maxFov - this.camera.fov, 0, 100);\n    }\n\n    /**\n     * Returns the current viewer size\n     */\n    getSize(): Size {\n        return { ...this.state.size };\n    }\n\n    /**\n     * Checks if the viewer is in fullscreen\n     */\n    isFullscreenEnabled(): boolean {\n        return isFullscreenEnabled(this.container);\n    }\n\n    /**\n     * Request a new render of the scene\n     */\n    needsUpdate() {\n        this.state.needsUpdate = true;\n    }\n\n    /**\n     * Resizes the scene if the viewer is resized\n     */\n    autoSize() {\n        if (\n            this.container.clientWidth !== this.state.size.width\n            || this.container.clientHeight !== this.state.size.height\n        ) {\n            this.state.size.width = Math.round(this.container.clientWidth);\n            this.state.size.height = Math.round(this.container.clientHeight);\n            this.state.aspect = this.state.size.width / this.state.size.height;\n            this.state.hFov = this.dataHelper.vFovToHFov(this.state.vFov);\n\n            this.dispatchEvent(new SizeUpdatedEvent(this.getSize()));\n        }\n    }\n\n    /**\n     * Loads a new panorama file\n     * @description Loads a new panorama file, optionally changing the camera position/zoom and activating the transition animation.<br>\n     * If the \"options\" parameter is not defined, the camera will not move and the ongoing animation will continue.<br>\n     * If another loading is already in progress it will be aborted.\n     * @returns promise resolved with false if the loading was aborted by another call\n     */\n    setPanorama(path: any, options: PanoramaOptions = {}): Promise<boolean> {\n        this.textureLoader.abortLoading();\n        this.state.transitionAnimation?.cancel();\n\n        // apply default parameters on first load\n        if (!this.state.ready) {\n            ['sphereCorrection', 'panoData', 'overlay', 'overlayOpacity'].forEach((opt) => {\n                if (!(opt in options)) {\n                    // @ts-ignore\n                    options[opt] = this.config[opt];\n                }\n            });\n        }\n\n        if (options.transition === undefined || options.transition === true) {\n            options.transition = DEFAULT_TRANSITION;\n        }\n        if (options.showLoader === undefined) {\n            options.showLoader = true;\n        }\n        if (options.caption === undefined) {\n            options.caption = this.config.caption;\n        }\n        if (options.description === undefined) {\n            options.description = this.config.description;\n        }\n        if (!options.panoData && typeof this.config.panoData === 'function') {\n            options.panoData = this.config.panoData;\n        }\n\n        const positionProvided = isExtendedPosition(options);\n        const zoomProvided = 'zoom' in options;\n\n        if (positionProvided || zoomProvided) {\n            this.stopAll();\n        }\n\n        this.hideError();\n        this.resetIdleTimer();\n\n        this.config.panorama = path;\n        this.config.caption = options.caption;\n        this.config.description = options.description;\n\n        const done = (err?: Error) => {\n            // this.loader.hide();\n\n            this.state.loadingPromise = null;\n\n            if (isAbortError(err)) {\n                return false;\n            } else if (err) {\n                // this.showError(this.config.lang.loadError);\n                console.error(err);\n                throw err;\n            } else {\n                return true;\n            }\n        };\n\n        if (options.showLoader || !this.state.ready) {\n            // this.loader.show();\n        }\n\n        const loadingPromise = this.adapter.loadTexture(this.config.panorama, options.panoData).then((textureData) => {\n            // check if another panorama was requested\n            if (textureData.panorama !== this.config.panorama) {\n                this.adapter.disposeTexture(textureData);\n                throw getAbortError();\n            }\n            return textureData;\n        });\n\n        if (!options.transition || !this.state.ready || !this.adapter.supportsTransition(this.config.panorama)) {\n            this.state.loadingPromise = loadingPromise\n                .then((textureData) => {\n                    this.renderer.show();\n                    this.renderer.setTexture(textureData);\n                    this.renderer.setPanoramaPose(textureData.panoData);\n                    this.renderer.setSphereCorrection(options.sphereCorrection);\n\n                    this.dispatchEvent(new PanoramaLoadedEvent(textureData));\n\n                    if (zoomProvided) {\n                        this.zoom(options.zoom);\n                    }\n                    if (positionProvided) {\n                        this.rotate(options);\n                    }\n\n                    if (!this.state.ready) {\n                        this.init();\n                    }\n                })\n                .then(\n                    () => done(),\n                    (err) => done(err)\n                );\n        } else {\n            this.state.loadingPromise = loadingPromise\n                .then((textureData) => {\n                    // this.loader.hide();\n\n                    this.dispatchEvent(new PanoramaLoadedEvent(textureData));\n\n                    this.state.transitionAnimation = this.renderer.transition(textureData, options);\n                    return this.state.transitionAnimation;\n                })\n                .then((completed) => {\n                    this.state.transitionAnimation = null;\n                    if (!completed) {\n                        throw getAbortError();\n                    }\n                })\n                .then(\n                    () => done(),\n                    (err) => done(err)\n                );\n        }\n\n        return this.state.loadingPromise;\n    }\n\n    /**\n     * Loads a new overlay\n     */\n    setOverlay(path: any, opacity = this.config.overlayOpacity): Promise<void> {\n        const supportsOverlay = (this.adapter.constructor as typeof AbstractAdapter).supportsOverlay;\n\n        if (!path) {\n            if (supportsOverlay) {\n                this.renderer.setOverlay(null, 0);\n            }\n\n            return Promise.resolve();\n        } else {\n            if (!supportsOverlay) {\n                return Promise.reject(new PSVError(`Current adapter does not supports overlay`));\n            }\n\n            return this.adapter\n                .loadTexture(\n                    path,\n                    (image) => {\n                        const p = this.state.panoData;\n                        const r = image.width / p.croppedWidth;\n                        return {\n                            fullWidth: r * p.fullWidth,\n                            fullHeight: r * p.fullHeight,\n                            croppedWidth: r * p.croppedWidth,\n                            croppedHeight: r * p.croppedHeight,\n                            croppedX: r * p.croppedX,\n                            croppedY: r * p.croppedY,\n                        };\n                    },\n                    false\n                )\n                .then((textureData) => {\n                    this.renderer.setOverlay(textureData, opacity);\n                });\n        }\n    }\n\n    /**\n     * Update options\n     * @throws {@link PSVError} if the configuration is invalid\n     */\n    setOptions(options: Partial<UpdatableViewerConfig>) {\n        const rawConfig: ViewerConfig = {\n            ...this.config,\n            ...options,\n        };\n\n        for (let [key, value] of Object.entries(options) as [keyof typeof rawConfig, any][]) {\n            if (!(key in DEFAULTS)) {\n                logWarn(`Unknown option ${key}`);\n                continue;\n            }\n\n            if (key in READONLY_OPTIONS) {\n                logWarn((READONLY_OPTIONS as any)[key]);\n                continue;\n            }\n\n            if (key in CONFIG_PARSERS) {\n                // @ts-ignore\n                value = CONFIG_PARSERS[key](value, {\n                    rawConfig: rawConfig,\n                    defValue: DEFAULTS[key],\n                } as any);\n            }\n\n            // @ts-ignore\n            this.config[key] = value;\n\n            switch (key) {\n                case 'caption':\n                    break;\n\n                case 'size':\n                    this.resize(this.config.size);\n                    break;\n\n                case 'sphereCorrection':\n                    this.renderer.setSphereCorrection(this.config.sphereCorrection);\n                    break;\n\n                case 'lang':\n                    break;\n\n                case 'moveSpeed':\n                case 'zoomSpeed':\n                    this.dynamics.updateSpeeds();\n                    break;\n\n                case 'minFov':\n                case 'maxFov':\n                    this.dynamics.zoom.setValue(this.dataHelper.fovToZoomLevel(this.state.vFov));\n                    this.dispatchEvent(new ZoomUpdatedEvent(this.getZoomLevel()));\n                    break;\n\n                case 'keyboard':\n                    if (this.config.keyboard === 'always') {\n                        this.startKeyboardControl();\n                    } else {\n                        this.stopKeyboardControl();\n                    }\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        this.needsUpdate();\n\n        this.dispatchEvent(new ConfigChangedEvent(Object.keys(options) as any));\n    }\n\n    /**\n     * Update options\n     * @throws {@link PSVError} if the configuration is invalid\n     */\n    setOption<T extends keyof UpdatableViewerConfig>(option: T, value: UpdatableViewerConfig[T]) {\n        this.setOptions({ [option]: value });\n    }\n\n    /**\n     * Displays an error message over the viewer\n     */\n    showError() {\n        // show error\n    }\n\n    /**\n     *  Hides the error message\n     */\n    hideError() {\n        // hide error\n    }\n\n    /**\n     * Rotates the view to specific position\n     */\n    rotate(position: ExtendedPosition) {\n        const e = new BeforeRotateEvent(this.dataHelper.cleanPosition(position));\n        this.dispatchEvent(e);\n\n        if (e.defaultPrevented) {\n            return;\n        }\n\n        this.dynamics.position.setValue(e.position);\n    }\n\n    /**\n     * Zooms to a specific level between `maxFov` and `minFov`\n     */\n    zoom(level: number) {\n        this.dynamics.zoom.setValue(level);\n    }\n\n    /**\n     * Increases the zoom level\n     */\n    zoomIn(step = 1) {\n        this.dynamics.zoom.step(step);\n    }\n\n    /**\n     * Decreases the zoom level\n     */\n    zoomOut(step = 1) {\n        this.dynamics.zoom.step(-step);\n    }\n\n    /**\n     * Rotates and zooms the view with a smooth animation\n     */\n    animate(options: AnimateOptions): Animation {\n        const positionProvided = isExtendedPosition(options);\n        const zoomProvided = options.zoom !== undefined;\n\n        const e = new BeforeAnimateEvent(\n            positionProvided ? this.dataHelper.cleanPosition(options) : undefined,\n            options.zoom\n        );\n        this.dispatchEvent(e);\n\n        if (e.defaultPrevented) {\n            return;\n        }\n\n        const cleanPosition = e.position as Position;\n        const cleanZoom = e.zoomLevel;\n\n        this.stopAll();\n\n        const animProperties: {\n            yaw?: { start: number; end: number };\n            pitch?: { start: number; end: number };\n            zoom?: { start: number; end: number };\n        } = {};\n        let duration;\n\n        // clean/filter position and compute duration\n        if (positionProvided) {\n            const currentPosition = this.getPosition();\n\n            // horizontal offset for shortest arc\n            const tOffset = getShortestArc(currentPosition.yaw, cleanPosition.yaw);\n\n            animProperties.yaw = { start: currentPosition.yaw, end: currentPosition.yaw + tOffset };\n            animProperties.pitch = { start: currentPosition.pitch, end: cleanPosition.pitch };\n\n            duration = this.dataHelper.speedToDuration(options.speed, getAngle(currentPosition, cleanPosition));\n        }\n\n        // clean/filter zoom and compute duration\n        if (zoomProvided) {\n            const dZoom = Math.abs(cleanZoom - this.getZoomLevel());\n\n            animProperties.zoom = { start: this.getZoomLevel(), end: cleanZoom };\n\n            if (!duration) {\n                // if animating zoom only and a speed is given, use an arbitrary PI/4 to compute the duration\n                duration = this.dataHelper.speedToDuration(options.speed, ((Math.PI / 4) * dZoom) / 100);\n            }\n        }\n\n        // if no animation needed\n        if (!duration) {\n            if (positionProvided) {\n                this.rotate(cleanPosition);\n            }\n            if (zoomProvided) {\n                this.zoom(cleanZoom);\n            }\n\n            return new Animation(null);\n        }\n\n        this.state.animation = new Animation({\n            properties: animProperties,\n            duration: Math.max(ANIMATION_MIN_DURATION, duration),\n            easing: 'inOutSine',\n            onTick: (properties) => {\n                if (positionProvided) {\n                    this.dynamics.position.setValue({\n                        yaw: properties.yaw,\n                        pitch: properties.pitch,\n                    });\n                }\n                if (zoomProvided) {\n                    this.dynamics.zoom.setValue(properties.zoom);\n                }\n            },\n        });\n\n        this.state.animation.then(() => {\n            this.state.animation = null;\n            this.resetIdleTimer();\n        });\n\n        return this.state.animation;\n    }\n\n    /**\n     * Stops the ongoing animation\n     * @description The return value is a Promise because the is no guaranty the animation can be stopped synchronously.\n     */\n    stopAnimation(): PromiseLike<any> {\n        if (this.state.animation) {\n            this.state.animation.cancel();\n            return this.state.animation;\n        } else {\n            return Promise.resolve();\n        }\n    }\n\n    /**\n     * Resizes the viewer\n     */\n    resize(size: CssSize) {\n        const s = size as any;\n        (['width', 'height'] as ('width' | 'height')[]).forEach((dim) => {\n            if (size && s[dim]) {\n                if (/^[0-9.]+$/.test(s[dim])) {\n                    s[dim] += 'px';\n                }\n                this.parent.style[dim] = s[dim];\n            }\n        });\n\n        this.autoSize();\n    }\n\n    /**\n     * Enters the fullscreen mode\n     */\n    enterFullscreen() {\n        if (!this.isFullscreenEnabled()) {\n            requestFullscreen(this.container);\n        }\n    }\n\n    /**\n     * Exits the fullscreen mode\n     */\n    exitFullscreen() {\n        if (this.isFullscreenEnabled()) {\n            exitFullscreen();\n        }\n    }\n\n    /**\n     * Enters or exits the fullscreen mode\n     */\n    toggleFullscreen() {\n        if (!this.isFullscreenEnabled()) {\n            this.enterFullscreen();\n        } else {\n            this.exitFullscreen();\n        }\n    }\n\n    /**\n     * Enables the keyboard controls\n     */\n    startKeyboardControl() {\n        this.state.keyboardEnabled = true;\n    }\n\n    /**\n     * Disables the keyboard controls\n     */\n    stopKeyboardControl() {\n        this.state.keyboardEnabled = false;\n    }\n\n    /**\n     * Subscribes to events on objects in the three.js scene\n     * @param userDataKey - only objects with the following `userData` will be observed\n     */\n    observeObjects(userDataKey: string): void {\n        this.state.objectsObservers[userDataKey] = null;\n    }\n\n    /**\n     * Unsubscribes to events on objects\n     */\n    unobserveObjects(userDataKey: string): void {\n        delete this.state.objectsObservers[userDataKey];\n    }\n\n    /**\n     * Stops all current animations\n     * @internal\n     */\n    stopAll(): PromiseLike<void> {\n        this.dispatchEvent(new StopAllEvent());\n\n        this.disableIdleTimer();\n\n        return this.stopAnimation();\n    }\n}\n"],"mappings":"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","names":["ACTIONS","target","src","angle","MathUtils","MathUtils","SliderDirection","Texture","MathUtils","Mesh","Texture","MathUtils","Mesh","Texture","MathUtils","MathUtils","Euler","MathUtils","Vector3","Vector3","Euler","MathUtils","angle","MathUtils","MathUtils","Vector2","Vector3","Vector2","Vector3","MathUtils","MathUtils","Vector3","Vector3","MathUtils"]}